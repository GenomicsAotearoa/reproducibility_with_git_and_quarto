[
  {
    "objectID": "episode_04_Track-Add-Commit-Changes.html",
    "href": "episode_04_Track-Add-Commit-Changes.html",
    "title": "Tracking, adding and committing changes",
    "section": "",
    "text": "Tracking, adding and committing changes\n\n\n\n\n\n\nKey points\n\n\n\n\ngit status shows the status of a repository.\n\nFiles can be stored in a project’s working directory (which users see), the staging area (where the next commit is being built up) and the local repository (where commits are permanently recorded).\n\ngit add puts files in the staging area.\n\ngit commit saves the staged content as a new commit in the local repository.\n\nWrite a commit message that accurately describes your changes.\n\n\n\n\nFirst let’s make sure we’re still in the right directory. You should be in the recipes directory.\ncd ~/Desktop/recipes\nLet’s create a file called guacamole.qmd that contains the basic structure of our first recipe. We’ll use nano to edit the file; you can use whatever editor you like. In particular, this does not have to be the core.editor you set globally earlier. But remember, the steps to create or edit a new file will depend on the editor you choose (it might not be nano). For a refresher on text editors, check out “Which Editor?” in The Carpentries Unix Shell lesson.\nnano guacamole.qmd\nPut some text in your guacamole.qmd file, for example:\n(I am leaving instructions blank here to add in an example later of file modification)\n# Guacamole recipe\n\n## Ingredients\n- Avocado  \n- Coriander  \n- Red onion  \n- Lemon juice  \n- Salt  \n\n## Instructions\n\n\nVerify that the file was made, using ls and cat commands to explore the file.\nIf we check the status of our project again, Git tells us that it’s noticed the new file:\ngit status\nOn branch main\n\nNo commits yet\n\nUntracked files:\n   (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    guacamole.qmd\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nThe “untracked files” message means that there’s a file in the directory that Git isn’t keeping track of. We can tell Git to track a file using git add:\ngit add guacamole.qmd\nand then check that the right thing happened:\ngit status\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n\n    new file:   guacamole.qmd\nGit now knows that it’s supposed to keep track of guacamole.qmd, but it hasn’t recorded these changes as a commit yet. The file is in what is called the ‘staging area’.\n\n\n\n\n\n\nWhat is the staging area?\n\n\n\n\n\nIf you think of Git as taking snapshots of changes over the life of a project, git add specifies what will go in a snapshot (putting things in the staging area), and git commit then actually takes the snapshot, and makes a permanent record of it (as a commit). If you don’t have anything staged when you type git commit, Git will prompt you to use git commit -a or git commit --all, which is kind of like gathering everyone to take a group photo! However, it’s almost always better to explicitly add things to the staging area, because you might commit changes you forgot you made. (Going back to the group photo simile, you might get an extra with incomplete makeup walking on the stage for the picture because you used -a!) Try to stage things manually, or you might find yourself searching for “git undo commit” more than you would like!\n\n\n\n\nTo get it to commit the staged files, we need to run one more command:\ngit commit -m \"Create initial structure for a Guacamole recipe\"\nWhen we run git commit, Git takes everything we have told it to save by using git add and stores a copy permanently inside the special .git directory. This permanent copy is called a commit (or revision) and its short identifier is f22b25e. Your commit may have another identifier.\nWe use the -m flag (for “message”) to record a short, descriptive, and specific comment that will help us remember later on what we did and why. If we just run git commit without the -m option, Git will launch nano (or whatever other editor we configured as core.editor) so that we can write a longer message.\nGood commit messages start with a brief (&lt;50 characters) statement about the changes made in the commit. Generally, the message should complete the sentence “If applied, this commit will” . If you want to go into more detail, add a blank line between the summary line and your additional notes. Use this additional space to explain why you made changes and/or what their impact will be.\nIf we run git status now:\ngit status\nOn branch main\nnothing to commit, working tree clean\nit tells us everything is up to date. If we want to know what we’ve done recently, we can ask Git to show us the project’s history using git log, it will list all commits made to a repository in reverse chronological order. The listing for each commit includes the commit’s full identifier (which starts with the same characters as the short identifier printed by the git commit command earlier), the commit’s author, when it was created, and the log message Git was given when the commit was created.\nNow suppose we add more information to the file. (Again, we’ll edit with nano and then cat the file to show its contents; you may use a different editor, and don’t need to cat)\nnano guacamole.qmd\nAdd some text (here I have now added instructions):\n# Guacamole recipe\n\n## Ingredients\n- Avocado  \n- Coriander  \n- Red onion  \n- Lemon juice  \n- Salt  \n\n## Instructions\n1. Mash the avocado\n2. Finely chop the coriander and red onion\n3. Add salt and lemon juice to taste  \n4. Enjoy!  \nWhen we run git status now, it tells us that a file it already knows about has been modified:\ngit status\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   guacamole.qmd\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nThe last line is the key phrase: “no changes added to commit”. We have changed this file, but we haven’t told Git we will want to save those changes (which we do with git add) nor have we saved them (which we do with git commit). So let’s do that now.\n\n\n\n\n\n\nReview changes with git diff\n\n\n\n\n\nIt is good practice to always review our changes before saving them. We do this using git diff. This shows us the differences between the current state of the file and the most recently saved version:\ngit diff\ndiff --git a/guacamole.qmd b/guacamole.qmd\nindex ad0d963..6249f4c 100644\n--- a/guacamole.qmd\n+++ b/guacamole.qmd\n@@ -8,3 +8,7 @@\n - Salt  \n \n ## Instructions\n+1. Mash the avocado\n+2. Finely chop the coriander and red onion\n+3. Add salt and lemon juice to taste  \n+4. Enjoy!\nThe output is cryptic because it is actually a series of commands for tools like editors and patch telling them how to reconstruct one file given the other. If we break it down into pieces:\n\nThe first line tells us that Git is producing output similar to the Unix diff command comparing the old and new versions of the file.\nThe second line tells exactly which versions of the file Git is comparing; ad0d963 and 6249f4c are unique computer-generated labels for those versions.\nThe third and fourth lines once again show the name of the file being changed.\nThe remaining lines are the most interesting, they show us the actual differences and the lines on which they occur. In particular, the + marker in the first column shows where we added a line.\n\n\n\n\nIt’s time to commit the modified version. Except remember, we need to git add the file again first:\ngit add guacamole.qmd\ngit commit -m \"Add instructions for basic guacamole\"\n[main 8a8041c] Add instructions for basic guacamole\n 1 file changed, 4 insertions(+)\nGit insists that we add files to the set we want to commit before actually committing anything. This allows us to commit our changes in stages and capture changes in logical portions rather than only large batches. For example, suppose we’re adding a few citations to relevant research to our thesis. We might want to commit those additions, and the corresponding bibliography entries, but not commit some of our work drafting the conclusion (which we haven’t finished yet).\nTo allow for this, Git has a special staging area where it keeps track of things that have been added to the current changeset but not yet committed.\n\nOther options for adding files\nWe can also add multiple files at once to the staging area, by specifiying all the files in one command:\ngit add guacamole.qmd groceries.qmd\nOr, by using git add . to add all files (new, modified, deleted files) in the current directory and subdirectories to the staging area:\ngit add .\nOr, by using git add -A to add all files (new, modified, deleted files) in the entire repository to the staging area:\ngit add -A\nDon’t forget to then commit your staged changes!",
    "crumbs": [
      "Part One - Git",
      "Tracking, adding and committing changes"
    ]
  },
  {
    "objectID": "episode_07_Collaborate-Organise.html",
    "href": "episode_07_Collaborate-Organise.html",
    "title": "Collaborating and organising your workflow",
    "section": "",
    "text": "Key points\n\n\n\n\ngit clone copies a remote repository to create a local repository with a remote called origin automatically set up.\nuse ‘Issues’ to track and fix any issues in a transparent way\nuse ‘Projects’ to collaboratively track tasks\n‘Organisations’ share repos and have different roles and access levels for members\n\n\n\n\n\nOften we want to download other people’s repositories to our local machine. One main reason for this can be because you want to use a set of scripts developed for a workflow.\nTo do this, we use git clone.\nFirst, navigate on GitHub to a repository that you want to download. If you have one in mind already go ahead and use that; for this example we will use the Kākāpo Genome project repo.\nClick this link here to go to the Kākāpo Genome project repository.\nYou’ll now see the repository for the Kākāpo Genome project on GitHub. Go to the green button in the top right that says “&lt;&gt; Code” and click it.\n\nNow, copy the SSH URL. For the Kākāpo Genome project repository this is:\ngit@github.com:GenomicsAotearoa/Kakapo.git\nBack in your RStudio on the terminal, check first which dir you are in:\npwd\n/Users/username/Desktop/recipes\nI am still in my recipes dir. It is best to not put a cloned repository into a local repository directory!\nYou will want to cd into a different directory. Either run cd .. to move back to your desktop, or cd /PATH/TO/DIR into a new dir of your choosing.\nOnce you are happy where you are in your file system, type the following:\ngit clone git@github.com:GenomicsAotearoa/Kakapo.git\nYou’ll see an output like this as git downloads all the files (shortened here for visual clarity):\nCloning into 'Kakapo'...\nremote: Enumerating objects: 1713, done.\nremote: Counting objects: 100% (54/54), done.\nremote: Compressing objects: 100% (42/42), done.\nReceiving objects:   5% (88/1713), 15.61 MiB | 4.92 MiB\n....  \nReceiving objects: 100% (1713/1713), 45.63 MiB | 6.00 MiB/s, done.\nResolving deltas: 100% (938/938), done.\nAnd now you will find the full repository on your computer and you can use the scripts for your own purposes.\n\n\n\n\n\n\nCan I push changes I have made locally to this repo back to the GitHub server?\n\n\n\n\n\nShort answer no, you will not have write access (unless you are a collaborator on the repo!) and you will get a permission denied error.\nLong answer, yes you can with additional steps:\n1. You can fork the repo to your own GitHub account.\n2. Clone your fork and make your changes.\n3. Push changes to your own forked repo.\n4. Then, you can create a pull request and suggest changes to the original repo - the owner may or may not accept and merge your changes!\n\n\n\n\nHint: If you don’t want this on your computer anymore after this workshop type: rm -r Kakapo\n\n\n\n\n\n\nIssues are a fantastic way to track what you want to change. You can open an issue for each change you want to make (i.e., typos, bug fixes, adding images, stylisation - anything!) and when you commit changes you can reference the issue number (e.g., git commit -m \"Bug fixes issue #1\") which links up the commit with the addressed issue automatically. Other people can also see and add issues to your repo – a great way to track progress!\nThere are a few other tips and tricks with ‘Issues’, but one of the most useful ones is being able to reference exact lines where you want to make changes using ‘permalinks’.\n\nNote: If you cannot see the ‘Issues’ tab on your repo, you may need to go to General Settings and enable the tickbox for ‘Issues’.\n\nHave a go at adding an issue for a change you want to make in your guacamole recipe, then make the change locally, add and commit the change, referencing the issue in the commit message.\nGo to your recipes repo on GitHub, find ‘Issues’ tab and click “New issue”.\n\nThen add a title, e.g.,:\n\nBefore you create the issue, right click your recipes repo in the top left, and open it in a new tab. Then, click on guacamole.qmd to bring up the code. On the left of the line you want to change, click to get the three dots to appear, click the dots, and click ‘Copy permalink’.\n\nNow go back to your issue, paste the permalink in the description, and add whatever descriptive text you want and create the issue:\n\nOur guacamole.qmd file is not very big, so specifying the exact line is not really necessary, but if you have a file with hundreds of lines of code then being able to track and note exactly where typos are is really handy!\nNow, go back to your terminal, make the changes locally, add, commit and push the changes, then go back to your GitHub repo and explore what happens!\ncd ~/Desktop/recipes\nQuick safety checks:\ngit status\ngit branch\nBefore you go any further, are you on the right branch? To change existing branches:\ngit checkout &lt;branch-name&gt;\nNow we are back on main. But wait, we merged a pull request earlier on GitHub, but these changes were made locally on a new branch before pushing to GitHub. Now that we are back on main, what does our guacamole.qmd file look like locally?\ncat guacamole.qmd\n# Guacamole recipe\n\n## Ingredients\n- Avocado  \n- Coriander  \n- Red onion  \n- Lemon juice\n- Salt  \n\n## Instructions\n1. Mash the avocado\n2. Finely chop the coriander and red onion\n3. Add salt and lemon juice to taste  \n4. Enjoy!\nIt’s our original recipe, without the added lime juice. We need the new one!\nWe can use git fetch to fetch information about files from the server (i.e., origin/main) and compare to our local files (i.e., main) to see if we need to pull down new copies of the files:\ngit fetch origin\ngit diff main origin/main\ndiff --git a/guacamole.qmd b/guacamole.qmd\nindex 6249f4c..2dc69fb 100644\n--- a/guacamole.qmd\n+++ b/guacamole.qmd\n@@ -4,11 +4,12 @@\n - Avocado  \n - Coriander  \n - Red onion  \n-- Lemon juice  \n+- Lemon juice\n+- Lime juice  \n - Salt  \n \n ## Instructions\n 1. Mash the avocado\n 2. Finely chop the coriander and red onion\n-3. Add salt and lemon juice to taste  \n+3. Add salt,lemon and lime juice to taste  \n 4. Enjoy!\nThe output shows there are lines that are different between our local main and our server origin/main.\ngit fetch does not touch your local files, so we now need to pull down the new file:\ngit pull origin main \nDouble check your local files match the server:\ngit fetch origin\ngit diff main origin/main\ngit diff gave no output - so all good to continue!\nnano guacamole.qmd\n# Guacamole recipe\n\n## Ingredients\n- Avocado x 2\n- Coriander\n- Red onion\n- Lemon juice\n- Lime juice\n- Salt\n\n## Instructions\n1. Mash the avocado\n2. Finely chop the coriander and red onion\n3. Add salt,lemon and lime juice to taste\n4. Enjoy!\nIn the above file I have now specified the number of avocados. Write out and close nano.\nCheck the file is now ‘modified’:\ngit status\nNow add and commit the file, importantly, reference the issue!:\ngit add .\ngit commit -m \"specified number of avos #2\"\n\n\n\n\n\n\nWait, why is it #2 if this was my first issue?\n\n\n\nIssues and pull requests share a numbering system. Because we did a pull request earlier, that got designated as #1. Therefore GitHub has automatically named this issue #2.\n\n\ngit push origin main\nGo back to your GitHub repo and have a look at the commit message - you’ll see the issue number is automatically linked. You can now click through and “Close issue”.\n\n\n\nProjects are a workflow management tool within GitHub, that allows us to plan and track issues and pull requests for multiple repositories in a single board. You can assign issues to collaborators and together use a single Project to track progress and who is working on what. You can designate tasks as “Todo”, “In Progress”, or “Done” (or use custom columns) and even set up automatic actions, so that issues are automatically moved from “In Progress” to “Done” when the issue is mentioned in a commit.\nProjects have many customisable options – you can read more about them here.\nHere is an example of the Project we use at Genomics Aotearoa to track workshop material repos:\n\n\n\n\n“Organisations are shared accounts where businesses and open-source projects can collaborate across many projects at once, with sophisticated security and administrative features.”\n- GitHub docs\nThere are many great features of using an Organisation account. You can view the Genomics Aotearoa Organisation account here. This is where we house all our workshop material and research project repos for workflows or scripts associated with a project. Members are assigned different roles, which allow different levels of read/write permissions and other things such as admin access or security management.\nFor further information on Organisations, see the GitHub docs here.\n\n\n\n\n\n\nTo avoid conflicts (and headaches!) we can manage our workflow by always:\n- Checking our file and branch status with git status, git branch and git diff\n- At the end of each day, remember to save your work by running git add, git commit and git push.\n- At the start of each day, check if there have been any changes to the repo on the server, and git pull as necessary.\n- Utilise branches and handy functionality such as ‘Issues’ and ‘Projects’ when collaborating with others – or even just for yourself!\n\n\n\nSometimes our repos get too messy and complicated, and we just want to burn it all down.\nThis website called Happy git with R by Jenny Bryan and Jim Hester is a fantastic guide on how to make Git/GitHub work with RStudio. If all else fails, they suggest in section 37 to simply “Burn it all down”. In short, make a copy of all the files you want to keep locally, delete your repo on GitHub and start anew.\n\n\n\nXKCD Comic 1597",
    "crumbs": [
      "Part One - Git",
      "Collaborating and organising your workflow"
    ]
  },
  {
    "objectID": "episode_07_Collaborate-Organise.html#cloning-remote-repositories",
    "href": "episode_07_Collaborate-Organise.html#cloning-remote-repositories",
    "title": "Collaborating and organising your workflow",
    "section": "",
    "text": "Often we want to download other people’s repositories to our local machine. One main reason for this can be because you want to use a set of scripts developed for a workflow.\nTo do this, we use git clone.\nFirst, navigate on GitHub to a repository that you want to download. If you have one in mind already go ahead and use that; for this example we will use the Kākāpo Genome project repo.\nClick this link here to go to the Kākāpo Genome project repository.\nYou’ll now see the repository for the Kākāpo Genome project on GitHub. Go to the green button in the top right that says “&lt;&gt; Code” and click it.\n\nNow, copy the SSH URL. For the Kākāpo Genome project repository this is:\ngit@github.com:GenomicsAotearoa/Kakapo.git\nBack in your RStudio on the terminal, check first which dir you are in:\npwd\n/Users/username/Desktop/recipes\nI am still in my recipes dir. It is best to not put a cloned repository into a local repository directory!\nYou will want to cd into a different directory. Either run cd .. to move back to your desktop, or cd /PATH/TO/DIR into a new dir of your choosing.\nOnce you are happy where you are in your file system, type the following:\ngit clone git@github.com:GenomicsAotearoa/Kakapo.git\nYou’ll see an output like this as git downloads all the files (shortened here for visual clarity):\nCloning into 'Kakapo'...\nremote: Enumerating objects: 1713, done.\nremote: Counting objects: 100% (54/54), done.\nremote: Compressing objects: 100% (42/42), done.\nReceiving objects:   5% (88/1713), 15.61 MiB | 4.92 MiB\n....  \nReceiving objects: 100% (1713/1713), 45.63 MiB | 6.00 MiB/s, done.\nResolving deltas: 100% (938/938), done.\nAnd now you will find the full repository on your computer and you can use the scripts for your own purposes.\n\n\n\n\n\n\nCan I push changes I have made locally to this repo back to the GitHub server?\n\n\n\n\n\nShort answer no, you will not have write access (unless you are a collaborator on the repo!) and you will get a permission denied error.\nLong answer, yes you can with additional steps:\n1. You can fork the repo to your own GitHub account.\n2. Clone your fork and make your changes.\n3. Push changes to your own forked repo.\n4. Then, you can create a pull request and suggest changes to the original repo - the owner may or may not accept and merge your changes!\n\n\n\n\nHint: If you don’t want this on your computer anymore after this workshop type: rm -r Kakapo",
    "crumbs": [
      "Part One - Git",
      "Collaborating and organising your workflow"
    ]
  },
  {
    "objectID": "episode_07_Collaborate-Organise.html#improving-your-workflow",
    "href": "episode_07_Collaborate-Organise.html#improving-your-workflow",
    "title": "Collaborating and organising your workflow",
    "section": "",
    "text": "Issues are a fantastic way to track what you want to change. You can open an issue for each change you want to make (i.e., typos, bug fixes, adding images, stylisation - anything!) and when you commit changes you can reference the issue number (e.g., git commit -m \"Bug fixes issue #1\") which links up the commit with the addressed issue automatically. Other people can also see and add issues to your repo – a great way to track progress!\nThere are a few other tips and tricks with ‘Issues’, but one of the most useful ones is being able to reference exact lines where you want to make changes using ‘permalinks’.\n\nNote: If you cannot see the ‘Issues’ tab on your repo, you may need to go to General Settings and enable the tickbox for ‘Issues’.\n\nHave a go at adding an issue for a change you want to make in your guacamole recipe, then make the change locally, add and commit the change, referencing the issue in the commit message.\nGo to your recipes repo on GitHub, find ‘Issues’ tab and click “New issue”.\n\nThen add a title, e.g.,:\n\nBefore you create the issue, right click your recipes repo in the top left, and open it in a new tab. Then, click on guacamole.qmd to bring up the code. On the left of the line you want to change, click to get the three dots to appear, click the dots, and click ‘Copy permalink’.\n\nNow go back to your issue, paste the permalink in the description, and add whatever descriptive text you want and create the issue:\n\nOur guacamole.qmd file is not very big, so specifying the exact line is not really necessary, but if you have a file with hundreds of lines of code then being able to track and note exactly where typos are is really handy!\nNow, go back to your terminal, make the changes locally, add, commit and push the changes, then go back to your GitHub repo and explore what happens!\ncd ~/Desktop/recipes\nQuick safety checks:\ngit status\ngit branch\nBefore you go any further, are you on the right branch? To change existing branches:\ngit checkout &lt;branch-name&gt;\nNow we are back on main. But wait, we merged a pull request earlier on GitHub, but these changes were made locally on a new branch before pushing to GitHub. Now that we are back on main, what does our guacamole.qmd file look like locally?\ncat guacamole.qmd\n# Guacamole recipe\n\n## Ingredients\n- Avocado  \n- Coriander  \n- Red onion  \n- Lemon juice\n- Salt  \n\n## Instructions\n1. Mash the avocado\n2. Finely chop the coriander and red onion\n3. Add salt and lemon juice to taste  \n4. Enjoy!\nIt’s our original recipe, without the added lime juice. We need the new one!\nWe can use git fetch to fetch information about files from the server (i.e., origin/main) and compare to our local files (i.e., main) to see if we need to pull down new copies of the files:\ngit fetch origin\ngit diff main origin/main\ndiff --git a/guacamole.qmd b/guacamole.qmd\nindex 6249f4c..2dc69fb 100644\n--- a/guacamole.qmd\n+++ b/guacamole.qmd\n@@ -4,11 +4,12 @@\n - Avocado  \n - Coriander  \n - Red onion  \n-- Lemon juice  \n+- Lemon juice\n+- Lime juice  \n - Salt  \n \n ## Instructions\n 1. Mash the avocado\n 2. Finely chop the coriander and red onion\n-3. Add salt and lemon juice to taste  \n+3. Add salt,lemon and lime juice to taste  \n 4. Enjoy!\nThe output shows there are lines that are different between our local main and our server origin/main.\ngit fetch does not touch your local files, so we now need to pull down the new file:\ngit pull origin main \nDouble check your local files match the server:\ngit fetch origin\ngit diff main origin/main\ngit diff gave no output - so all good to continue!\nnano guacamole.qmd\n# Guacamole recipe\n\n## Ingredients\n- Avocado x 2\n- Coriander\n- Red onion\n- Lemon juice\n- Lime juice\n- Salt\n\n## Instructions\n1. Mash the avocado\n2. Finely chop the coriander and red onion\n3. Add salt,lemon and lime juice to taste\n4. Enjoy!\nIn the above file I have now specified the number of avocados. Write out and close nano.\nCheck the file is now ‘modified’:\ngit status\nNow add and commit the file, importantly, reference the issue!:\ngit add .\ngit commit -m \"specified number of avos #2\"\n\n\n\n\n\n\nWait, why is it #2 if this was my first issue?\n\n\n\nIssues and pull requests share a numbering system. Because we did a pull request earlier, that got designated as #1. Therefore GitHub has automatically named this issue #2.\n\n\ngit push origin main\nGo back to your GitHub repo and have a look at the commit message - you’ll see the issue number is automatically linked. You can now click through and “Close issue”.\n\n\n\nProjects are a workflow management tool within GitHub, that allows us to plan and track issues and pull requests for multiple repositories in a single board. You can assign issues to collaborators and together use a single Project to track progress and who is working on what. You can designate tasks as “Todo”, “In Progress”, or “Done” (or use custom columns) and even set up automatic actions, so that issues are automatically moved from “In Progress” to “Done” when the issue is mentioned in a commit.\nProjects have many customisable options – you can read more about them here.\nHere is an example of the Project we use at Genomics Aotearoa to track workshop material repos:\n\n\n\n\n“Organisations are shared accounts where businesses and open-source projects can collaborate across many projects at once, with sophisticated security and administrative features.”\n- GitHub docs\nThere are many great features of using an Organisation account. You can view the Genomics Aotearoa Organisation account here. This is where we house all our workshop material and research project repos for workflows or scripts associated with a project. Members are assigned different roles, which allow different levels of read/write permissions and other things such as admin access or security management.\nFor further information on Organisations, see the GitHub docs here.",
    "crumbs": [
      "Part One - Git",
      "Collaborating and organising your workflow"
    ]
  },
  {
    "objectID": "episode_07_Collaborate-Organise.html#final-thoughts",
    "href": "episode_07_Collaborate-Organise.html#final-thoughts",
    "title": "Collaborating and organising your workflow",
    "section": "",
    "text": "To avoid conflicts (and headaches!) we can manage our workflow by always:\n- Checking our file and branch status with git status, git branch and git diff\n- At the end of each day, remember to save your work by running git add, git commit and git push.\n- At the start of each day, check if there have been any changes to the repo on the server, and git pull as necessary.\n- Utilise branches and handy functionality such as ‘Issues’ and ‘Projects’ when collaborating with others – or even just for yourself!\n\n\n\nSometimes our repos get too messy and complicated, and we just want to burn it all down.\nThis website called Happy git with R by Jenny Bryan and Jim Hester is a fantastic guide on how to make Git/GitHub work with RStudio. If all else fails, they suggest in section 37 to simply “Burn it all down”. In short, make a copy of all the files you want to keep locally, delete your repo on GitHub and start anew.\n\n\n\nXKCD Comic 1597",
    "crumbs": [
      "Part One - Git",
      "Collaborating and organising your workflow"
    ]
  },
  {
    "objectID": "episode_03_CreatingARepository.html",
    "href": "episode_03_CreatingARepository.html",
    "title": "Create a repository",
    "section": "",
    "text": "Create a repository\n\n\n\n\n\n\nKey points\n\n\n\n\ngit init initialises a repository.\n\nGit stores all of its repository data in the .git directory.\n\n\n\n\nOnce Git is configured, we can start using it.\nWe will create a repository with all our favourite recipes.\nFirst, let’s create a new directory in the Desktop folder for our work and then change the current working directory to the newly created one:\ncd ~/Desktop\nmkdir recipes\ncd recipes\nThen we tell Git to make recipes a repository – a place where Git can store versions of our files:\ngit init\nIt is important to note that git init will create a repository that can include subdirectories and their files—there is no need to create separate repositories nested within the recipes repository, whether subdirectories are present from the beginning or added later. Also, note that the creation of the recipes directory and its initialisation as a repository are completely separate processes.\nIf we use ls -a to show everything, we can see that Git has created a hidden directory within recipes called .git:\n. .. .git\nGit uses this special subdirectory to store all the information about the project, including the tracked files and sub-directories located within the project’s directory. If we ever delete the .git subdirectory, we will lose the project’s history.\n\nNested subdirectories\nYou do not need to initialise a repository in a subdirectory of a directory that is already a repository – in fact, it is best not to!\n\n\n\n\n\n\nHow to undo nested subdirectories\n\n\n\n\n\nRemoving files from a Git repository needs to be done with caution. But we have not learned yet how to tell Git to track a particular file; we will learn this in the next episode. Files that are not tracked by Git can easily be removed like any other “ordinary” files with:\nrm filename\nSimilarly a directory can be removed using\nrm -r dirname\nIf the files or folder being removed in this fashion are tracked by Git, then their removal becomes another change that we will need to track, as we will see in the next episode.\nGit keeps all of its files in the .git directory. To recover from this little mistake, remove the .git folder in the subdirectory by running the following command from inside the parent directory:\nrm -rf subdirectory/.git\n\n\n\n\n\nCheck status\nWe can now start using one of the most important git commands, which is particularly helpful to beginners. git status tells us the status of our project, and better, a list of changes in the project and options on what to do with those changes. We can use it as often as we want, whenever we want to understand what is going on.\nWe can now start using one of the most important git commands, which is particularly helpful to beginners. git status tells us the status of our project, and better, a list of changes in the project and options on what to do with those changes. We can use it as often as we want, whenever we want to understand what is going on.\ngit status\nOn branch main\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)",
    "crumbs": [
      "Part One - Git",
      "Create a repository"
    ]
  },
  {
    "objectID": "episode_21_introduction.html",
    "href": "episode_21_introduction.html",
    "title": "Introduction to Quarto",
    "section": "",
    "text": "We propose using Quarto based on the assertion that that code alone is not enough to ensure reproducibility. A complete copy of all code, and an example dataset, can be used to accurately reproduce a result - however, it does not convey the logic, the reasoning, the intent of the work*.\nQuarto is a system for producing documents which contain all code, comments from the author, and embedded outputs. The system is easy to use and wraps around the code you will already be writing, with the aim of making this documentation part of your every day workflow.\n*An often-told story is about a cook who used to cut the ends off the meatloaf, not knowing why other than it’s how their mother used to do it. The story goes first to the mother, who explains that she learned to cut the ends off the loaf from her mother, and then we learn from the grandmother that she used to use one tray for baking the meatloaf, and a shorter tray for serving - the ends were cut off to fit the serving tray.\n\n\n\nall code involved in viewing, manipulating, and storing data.\na snapshot of the input format, so that we know what our data should look like going in.\nthe outcome (tables, figures, saved files), so that we can independently re-run the analysis and ensure we get the same result, and demonstrate the format of the outcome so that we can use the method on our own data.\nthe mindset and logic used at each step, so that we can understand why certain methods and thresholds were chosen and determine for ourselves whether to apply or modify those steps for our own analysis.",
    "crumbs": [
      "Part Two - Quarto",
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "episode_21_introduction.html#what-are-we-trying-to-achieve",
    "href": "episode_21_introduction.html#what-are-we-trying-to-achieve",
    "title": "Introduction to Quarto",
    "section": "",
    "text": "We propose using Quarto based on the assertion that that code alone is not enough to ensure reproducibility. A complete copy of all code, and an example dataset, can be used to accurately reproduce a result - however, it does not convey the logic, the reasoning, the intent of the work*.\nQuarto is a system for producing documents which contain all code, comments from the author, and embedded outputs. The system is easy to use and wraps around the code you will already be writing, with the aim of making this documentation part of your every day workflow.\n*An often-told story is about a cook who used to cut the ends off the meatloaf, not knowing why other than it’s how their mother used to do it. The story goes first to the mother, who explains that she learned to cut the ends off the loaf from her mother, and then we learn from the grandmother that she used to use one tray for baking the meatloaf, and a shorter tray for serving - the ends were cut off to fit the serving tray.\n\n\n\nall code involved in viewing, manipulating, and storing data.\na snapshot of the input format, so that we know what our data should look like going in.\nthe outcome (tables, figures, saved files), so that we can independently re-run the analysis and ensure we get the same result, and demonstrate the format of the outcome so that we can use the method on our own data.\nthe mindset and logic used at each step, so that we can understand why certain methods and thresholds were chosen and determine for ourselves whether to apply or modify those steps for our own analysis.",
    "crumbs": [
      "Part Two - Quarto",
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "episode_21_introduction.html#what-is-quarto",
    "href": "episode_21_introduction.html#what-is-quarto",
    "title": "Introduction to Quarto",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nQuarto is a literate programming system that facilitates the easy creation of documents that wrap and store our code, the outputs, and notes. With a small bit of extra effort when writing our code, Quarto can generate pdfs, word docs, slideshow presentations, and websites. It is designed for scientific publishing, and works with multiple languages (R, Julia, Python) - the outcome from these code blocks can be easily embedded (e.g., if code produces a figure, that figure will appear in the document). Quarto itself uses “markdown language”, and will be familiar for anyone already using RMarkdown. Markdown is meant to be readable even before it’s published, which means our day-to-day working documents are not a chore to work with.\nSimply, with Quarto, you will add small pieces of code to define headers, insert code blocks, embed links and figures. This code is then rendered into a document for distribution or storage.\nThis website was built with Quarto. As an example, it has clear structure, embedded images and code, and a format that was very easy to create and replicate across documents. The same content could be easily redirected into a pdf or even a slideshow with very little effort.\n\nWhat is the purpose of Quarto?\nQuarto exists to make publishing scientific documents easy, and to facilitate the creation of flexible, high quality outputs.\nHaving the ability to create one or more documents with all code, comments, and output together is highly beneficial. Compare this to having individual R scripts, figures saved to a folder, and a word document with notes.\n\n\nWhat can we do with Quarto?\nLots! It’s worth noting that we write our document using Quarto’s markdown language, and this is then translated into the final document, and it’s very easy to switch the output types (e.g., the same working document can be used to produce a word doc, a pdf, and a slideshow). Beyond simple documents, Quarto is an easy way to create websites, blogs, dashboards, and books (even a PhD thesis).\nQuarto places a premium on quality - the online community of people using quarto are creating stylistic, clear, well-designed documents that emphasise the importance of science communication.\nAs an example, the R For Data Science (2e) book was created in Quarto – both the printed version and the website.\n\n\nHow does it work?\n\n\n\nThe Quarto render process\n\n\nThis visual comes directly from a Quarto workshop presented at posit::conf(2023) by Andrew Bray, Amelia McNamara, Emil Hvitfeldt, and Mouna Belaid. We highly recommend this workshop, which covers a lot of background detail and specifics that we won’t have time to go over.\nIn brief, we produce a .qmd file (a Quarto file), which will include some mix of text, code, and the markdown language required to format and control the file. The code can be R, Python, Julia, etc.,. The code is converted into output (e.g., figures are generated, sums calculated), and this is then converted into one or more output documents.\n\n\nIsn’t this just RMarkdown?\nIf you are familiar with RMarkdown this will all look and sound familiar, and these systems both aim to capture information and improve reproducibility. In fact, if you have RMarkdown documents you can rename them as .qmd files and they will render.\nHowever, note that RMarkdown is R-specific. Quarto is language agnostic and can be used by people who work in Python.\nIn addition, Quarto has a strong focus on output documents and you will have an easier time with formatting and making high quality documents.",
    "crumbs": [
      "Part Two - Quarto",
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "episode_21_introduction.html#working-in-quarto",
    "href": "episode_21_introduction.html#working-in-quarto",
    "title": "Introduction to Quarto",
    "section": "Working in Quarto",
    "text": "Working in Quarto\nWe will start by creating some basic documents, building up our working knowledge of the quarto language.\nQuarto is a part of RStudio and this is how we will be working with it today. There is a Quarto R package that can be run separately from RStudio, and there is a Quarto extension for VisualStudioCode.",
    "crumbs": [
      "Part Two - Quarto",
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "episode_06_Branches-Pull-Merge.html",
    "href": "episode_06_Branches-Pull-Merge.html",
    "title": "Branches, pulling and merging",
    "section": "",
    "text": "Key points\n\n\n\n\ngit pull origin main will download changes on the server to your local directory\nWe can make new branches to work on major issues, then merge these into our main branch\n\n\n\n\n\nPulling takes changes made on a remote repository and brings them down into your local repository. For example, say you are collaborating on a project and your partner has made some changes and pushed them up to the github repo. You now want to pull down all those changes and keep working on the project locally.\nLet’s have a go at this.\n\n\nGo to the recipes repository page on github. You will see an option to add a “README” file.\n\nClick “Add a README” and add some info, e.g.:\nThis repo is to house all my favourite recipes :)\nBy adding this file directly on the GitHub server, we have simulated the same scenario as if someone had pushed this file to the repo instead.\n\n\n\n\n\n\nBut what if I don’t want people to be able to push to my repo?\n\n\n\n\n\nBy default, noone can push to a repo that you have made under your own GitHub account. But, anyone can clone or fork them. To restrict or modify acccess, under general settings you can add collaborators, or you can change the visibility of your repo from public to private.\n\n\n\nClick commit changes:\n\nThen you will be prompted to add a commit message. Add something sensible such as “Add initial README” and click commit changes.\n\nYou will then see your new file in your recipes repo with the new commit message:\n\n\n\n\nBack on your local command line, navigate to your recipes directory:\ncd ~/Desktop/recipes\nNow run the following to pull changes to your local computer:\ngit pull origin main\nAnd you’ll see an output like this:\nFrom github.com:username/recipes\n * branch            main       -&gt; FETCH_HEAD\nUpdating 1fecf68..7ae1866\nFast-forward\n README.md | 2 ++\n 1 file changed, 2 insertions(+)\n create mode 100644 README.md\nRun ls to see the files in your directory and confirm we now have the README file locally.\n\n\ngit pull does not blindly overwrite uncommitted local changes. When we pull everything from the server, the most common scenario is the “fast-forward”, such as we have done here. Git checks if you have changes that haven’t been committed yet. If you do, Git will try to merge the changes from the server with your local changes. If there’s a conflict (for example, if you and someone else changed the same line in a file), Git will stop and ask you to resolve the conflict before continuing. In the most common case (when you haven’t made any local changes or your local changes are already committed) Git can just add the new changes from the server on top of your work. This is called a “fast-forward” update, and it’s what happened in our example. Our local directory now matches the content in the Github server. There are different scenarios if your local file is behind and if there are merge conflicts. In this workshop, we will not cover how to deal with conflicts; you can read more about it here and more on recovering files and exploring history here.\n\n\n\n\n\nSo far, we have been working on one branch, called main. We can add more branches to our tree, make any changes we wish safely without affecting the main branch and when we are ready we can ‘Compare and pull’ these changes into the main branch. Generally, we want to make brnaches to work on when we are doing bug fixes of our code or testing out major restructuring or styling and we don’t want these to be pushed to the main branch just yet.\nLet’s practise making a new branch.\nBack in RStudio, type the following into terminal to see what branch you are currently on:\ngit branch\nAs we have been working on one branch, main, you should see this output:\n* main\nNow we can make a new branch and switch to it. You can name it anything you like, but its best to pick something that describes what you are doing with that branch. You may even want to name it after the ‘Issue’ you are addressing – more on ‘Issues’ in the next episode!\ngit checkout -b test-new-recipe\nSwitched to a new branch 'test-new-recipe'\n\n\n\n\n\n\nWhat does git checkout do?\n\n\n\n\n\nIf you run git checkout branch-name, it switches your working directory to the specified existing branch.\nIf you run git checkout -b branch-name, it creates and switches your working directory to the specified branch.\nIf you run git checkout file.txt, it restores that file to its last committed state (discarding changes).\nIf you run git checkout with no arguments, it will show you which files have been modified since the last commit.\nMore info here.\n\n\n\nNow run git branch again:\n  main\n* test-new-recipe\nAnd you can see we are now on a new branch, indicated with an asterisk. We haven’t pushed our changes yet to the GitHub server, so you won’t see the branch there yet. Let’s make some modifications, then push those up to the server.\nOpen your guacamole recipe with nano and make a new change to the recipe.\nnano guacamole.qmd\nI’m going to edit mine to add lime juice, you can do any change you like :)\n# Guacamole recipe\n\n## Ingredients\n- Avocado  \n- Coriander  \n- Red onion  \n- Lemon juice\n- Lime juice  \n- Salt  \n\n## Instructions\n1. Mash the avocado\n2. Finely chop the coriander and red onion\n3. Add salt,lemon and lime juice to taste  \n4. Enjoy!\nNow, add, commit and push your new changes:\ngit add guacamole.qmd\ngit status\nOn branch test-new-recipe\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   guacamole.qmd\ngit commit -m \"recipe updates\"\ngit push origin test-new-recipe\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 338 bytes | 338.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nremote: \nremote: Create a pull request for 'test-new-recipe' on GitHub by visiting:\nremote:      https://github.com/username/recipes/pull/new/test-new-recipe\nremote: \nTo github.com:username/recipes.git\n * [new branch]      test-new-recipe -&gt; test-new-recipe\n\n\nYou may notice in the output it says:\nremote: Create a pull request for 'test-new-recipe'\nWe can now review this pull request in github. You’ll see a button “Compare & pull request”\n\nThis is GitHub asking if we want to ‘pull’ our new branch into our main branch. Click the button.\n\nYou can now see what changes were made in the file, and are given the option to ‘Create pull request’. The title will default to the commit message you used and you can add further description if you like. Click ‘Create pull request’.\nThe pull request is now made, but our new branch has not been merged into main yet, it is waiting for us to merge it. There are different kinds of merges, but today we will do the default merge.\n\nOptionally add a comment, or otherwise click ‘Merge pull request’ to merge your test-new-recipe branch into main. GitHub will give you a default commit message, which you can leave as is. Click ‘Confirm merge’.\n\nIt’s good practice to ‘trim your tree’ and remove branches that you no longer need. You can click through to branches and safely delete the test-new-recipe branch.\nHave a look back at your main repo now. You’ll see the commit message has updated to the most recent one you used when you committed the changes to guacamole.qmd on the new branch.\n\nBy default, other people cannot make branches directly on your repository, unless you have added them as collaborators. You can assign roles to collaborators to control if they are able to push directly onto main, or if you want to personally approve all pull requests. Other people can however fork your public repository (making a copy on their own account) and submit a pull request back to your original repository, which you can then decide to merge or not. You can switch your repository to private in settings – note that you cannot turn private repositories into a website via GitHub pages.\n\n\nIn this workshop we will not be covering how to deal with merge conflicts i.e., when the remote repository has changes that have not been incorporated into the local repository. Git will reject the push/pull if it detects merge conflicts, and you may then need to tell Git how to resolve these. The Carpentries lesson has a section on how to deal with Conflicts.",
    "crumbs": [
      "Part One - Git",
      "Branches, pulling and merging"
    ]
  },
  {
    "objectID": "episode_06_Branches-Pull-Merge.html#pulling-repositories-from-the-server-to-our-local-computer",
    "href": "episode_06_Branches-Pull-Merge.html#pulling-repositories-from-the-server-to-our-local-computer",
    "title": "Branches, pulling and merging",
    "section": "",
    "text": "Pulling takes changes made on a remote repository and brings them down into your local repository. For example, say you are collaborating on a project and your partner has made some changes and pushed them up to the github repo. You now want to pull down all those changes and keep working on the project locally.\nLet’s have a go at this.\n\n\nGo to the recipes repository page on github. You will see an option to add a “README” file.\n\nClick “Add a README” and add some info, e.g.:\nThis repo is to house all my favourite recipes :)\nBy adding this file directly on the GitHub server, we have simulated the same scenario as if someone had pushed this file to the repo instead.\n\n\n\n\n\n\nBut what if I don’t want people to be able to push to my repo?\n\n\n\n\n\nBy default, noone can push to a repo that you have made under your own GitHub account. But, anyone can clone or fork them. To restrict or modify acccess, under general settings you can add collaborators, or you can change the visibility of your repo from public to private.\n\n\n\nClick commit changes:\n\nThen you will be prompted to add a commit message. Add something sensible such as “Add initial README” and click commit changes.\n\nYou will then see your new file in your recipes repo with the new commit message:\n\n\n\n\nBack on your local command line, navigate to your recipes directory:\ncd ~/Desktop/recipes\nNow run the following to pull changes to your local computer:\ngit pull origin main\nAnd you’ll see an output like this:\nFrom github.com:username/recipes\n * branch            main       -&gt; FETCH_HEAD\nUpdating 1fecf68..7ae1866\nFast-forward\n README.md | 2 ++\n 1 file changed, 2 insertions(+)\n create mode 100644 README.md\nRun ls to see the files in your directory and confirm we now have the README file locally.\n\n\ngit pull does not blindly overwrite uncommitted local changes. When we pull everything from the server, the most common scenario is the “fast-forward”, such as we have done here. Git checks if you have changes that haven’t been committed yet. If you do, Git will try to merge the changes from the server with your local changes. If there’s a conflict (for example, if you and someone else changed the same line in a file), Git will stop and ask you to resolve the conflict before continuing. In the most common case (when you haven’t made any local changes or your local changes are already committed) Git can just add the new changes from the server on top of your work. This is called a “fast-forward” update, and it’s what happened in our example. Our local directory now matches the content in the Github server. There are different scenarios if your local file is behind and if there are merge conflicts. In this workshop, we will not cover how to deal with conflicts; you can read more about it here and more on recovering files and exploring history here.",
    "crumbs": [
      "Part One - Git",
      "Branches, pulling and merging"
    ]
  },
  {
    "objectID": "episode_06_Branches-Pull-Merge.html#branches",
    "href": "episode_06_Branches-Pull-Merge.html#branches",
    "title": "Branches, pulling and merging",
    "section": "",
    "text": "So far, we have been working on one branch, called main. We can add more branches to our tree, make any changes we wish safely without affecting the main branch and when we are ready we can ‘Compare and pull’ these changes into the main branch. Generally, we want to make brnaches to work on when we are doing bug fixes of our code or testing out major restructuring or styling and we don’t want these to be pushed to the main branch just yet.\nLet’s practise making a new branch.\nBack in RStudio, type the following into terminal to see what branch you are currently on:\ngit branch\nAs we have been working on one branch, main, you should see this output:\n* main\nNow we can make a new branch and switch to it. You can name it anything you like, but its best to pick something that describes what you are doing with that branch. You may even want to name it after the ‘Issue’ you are addressing – more on ‘Issues’ in the next episode!\ngit checkout -b test-new-recipe\nSwitched to a new branch 'test-new-recipe'\n\n\n\n\n\n\nWhat does git checkout do?\n\n\n\n\n\nIf you run git checkout branch-name, it switches your working directory to the specified existing branch.\nIf you run git checkout -b branch-name, it creates and switches your working directory to the specified branch.\nIf you run git checkout file.txt, it restores that file to its last committed state (discarding changes).\nIf you run git checkout with no arguments, it will show you which files have been modified since the last commit.\nMore info here.\n\n\n\nNow run git branch again:\n  main\n* test-new-recipe\nAnd you can see we are now on a new branch, indicated with an asterisk. We haven’t pushed our changes yet to the GitHub server, so you won’t see the branch there yet. Let’s make some modifications, then push those up to the server.\nOpen your guacamole recipe with nano and make a new change to the recipe.\nnano guacamole.qmd\nI’m going to edit mine to add lime juice, you can do any change you like :)\n# Guacamole recipe\n\n## Ingredients\n- Avocado  \n- Coriander  \n- Red onion  \n- Lemon juice\n- Lime juice  \n- Salt  \n\n## Instructions\n1. Mash the avocado\n2. Finely chop the coriander and red onion\n3. Add salt,lemon and lime juice to taste  \n4. Enjoy!\nNow, add, commit and push your new changes:\ngit add guacamole.qmd\ngit status\nOn branch test-new-recipe\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   guacamole.qmd\ngit commit -m \"recipe updates\"\ngit push origin test-new-recipe\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 338 bytes | 338.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nremote: \nremote: Create a pull request for 'test-new-recipe' on GitHub by visiting:\nremote:      https://github.com/username/recipes/pull/new/test-new-recipe\nremote: \nTo github.com:username/recipes.git\n * [new branch]      test-new-recipe -&gt; test-new-recipe\n\n\nYou may notice in the output it says:\nremote: Create a pull request for 'test-new-recipe'\nWe can now review this pull request in github. You’ll see a button “Compare & pull request”\n\nThis is GitHub asking if we want to ‘pull’ our new branch into our main branch. Click the button.\n\nYou can now see what changes were made in the file, and are given the option to ‘Create pull request’. The title will default to the commit message you used and you can add further description if you like. Click ‘Create pull request’.\nThe pull request is now made, but our new branch has not been merged into main yet, it is waiting for us to merge it. There are different kinds of merges, but today we will do the default merge.\n\nOptionally add a comment, or otherwise click ‘Merge pull request’ to merge your test-new-recipe branch into main. GitHub will give you a default commit message, which you can leave as is. Click ‘Confirm merge’.\n\nIt’s good practice to ‘trim your tree’ and remove branches that you no longer need. You can click through to branches and safely delete the test-new-recipe branch.\nHave a look back at your main repo now. You’ll see the commit message has updated to the most recent one you used when you committed the changes to guacamole.qmd on the new branch.\n\nBy default, other people cannot make branches directly on your repository, unless you have added them as collaborators. You can assign roles to collaborators to control if they are able to push directly onto main, or if you want to personally approve all pull requests. Other people can however fork your public repository (making a copy on their own account) and submit a pull request back to your original repository, which you can then decide to merge or not. You can switch your repository to private in settings – note that you cannot turn private repositories into a website via GitHub pages.\n\n\nIn this workshop we will not be covering how to deal with merge conflicts i.e., when the remote repository has changes that have not been incorporated into the local repository. Git will reject the push/pull if it detects merge conflicts, and you may then need to tell Git how to resolve these. The Carpentries lesson has a section on how to deal with Conflicts.",
    "crumbs": [
      "Part One - Git",
      "Branches, pulling and merging"
    ]
  },
  {
    "objectID": "git_overview.html",
    "href": "git_overview.html",
    "title": "Git Overview",
    "section": "",
    "text": "What is Git/Github and why do I want to use it?\nGit is a version control system. It lets you track changes to your code and documents over time, so you can:\n\nOrganise your work: keep your research projects, analysis scripts, and data files tidy and structured.\nTrack changes: see what was added, removed, or modified, and go back to previous versions if something breaks.\nCollaborate safely: multiple people can work on the same project without overwriting each other’s work.\n\nGitHub is a cloud-based platform that works with Git. It lets you:\n\nShare your projects with others, or download packages and code that other researchers have shared.\n\nCollaborate on code and projects with colleagues or contributors around the world.\n\nCreate webpages and reports using tools like Quarto (we’ll cover this in part two of the workshop).\n\nHost and publish your work online, making it easier to share and document your research reproducibly.\n\nIn short: Git keeps your work organised and versioned on your local computer, and GitHub lets you back it up, share it, and collaborate with others online.\n\n\n\n\n\n\nSome cool examples of how people use git/github:\n\n\n\n\nThe Kākāpō genome project, with all the scripts and workflows needed for the genome assembly.\n\nThe website for the Genomics Aotearoa Bioinformatics Training Programme is hosted on github, written in Quarto and displayed using github pages.\n\nA curated list of awesome ggplot2 packages\n\n\n\n\n\nSetup on local machine\nWe will run everything locally in RStudio. If you are confident using the command line, you could also use any command line shell you like instead (e.g., Terminal (macOS), Warp, GitBash for Windows, Visual Studio Code). Please have the following installed before the workshop.\nIf you already have these tools installed, make sure they are up to date.\n\n1. Install the latest version of R\n\nMac: Download .pkg installer here\n\nWindows: Download .exe installer here\n\nLinux: Instructions here\n\n\nNote: Do not use .tar.gz source files unless you want to compile R from source.\n\n\n\n2. Install the latest version of RStudio\n\nDownload RStudio Desktop\n\n\n\n3. Install Git\nGit is a separate program from R/RStudio.\n\nMac: Check if Git is already installed. Open terminal and run:\n\n\ngit --version\n\nNote: If it is not already installed, follow instructions here for macOS\n\n\nWindows: Follow the “Installing Git for Windows” instructions here on the software carpentry page (Instructions may be hiding under “The Bash Shell” section, tab for “Git for Windows”.)\n\n\n\n\n\n\n\nIf you can’t find it, the instructions are copy-pasted here:\n\n\n\n\n\nInstalling Git for Windows\nIf you are unable to use WSL 2, please use the following instructions to install Git for Windows (“Git Bash”).\n\nDownload the Git for Windows installer.\nRun the installer and follow the steps below:\n\nClick on “Next” four times (two times if you’ve previously installed Git). You don’t need to change anything in the Information, location, components, and start menu screens.\nFrom the dropdown menu, “Choosing the default editor used by Git”, select “Use the Nano editor by default” (NOTE: you will need to scroll up to find it) and click on “Next”.\nOn the page that says “Adjusting the name of the initial branch in new repositories”, ensure that “Let Git decide” is selected. This will ensure the highest level of compatibility for our lessons.\nEnsure that “Git from the command line and also from 3rd-party software” is selected and click on “Next”. (If you don’t do this Git Bash will not work properly, requiring you to remove the Git Bash installation, re-run the installer and to select the “Git from the command line and also from 3rd-party software” option.)\nSelect “Use bundled OpenSSH”.\nEnsure that “Use the native Windows Secure Channel Library” is selected and click on “Next”.\nEnsure that “Checkout Windows-style, commit Unix-style line endings” is selected and click on “Next”.\nEnsure that “Use Windows’ default console window” is selected and click on “Next”.\nEnsure that “Default (fast-forward or merge) is selected and click”Next”\nEnsure that “Git Credential Manager” is selected and click on “Next”.\nEnsure that “Enable file system caching” is selected and click on “Next”.\nClick on “Install”.\nClick on “Finish” or “Next”.\n\nIf your “HOME” environment variable is not set (or you don’t know what this is):\n\nOpen command prompt (Open Start Menu then type cmd and press Enter)\nType the following line into the command prompt window exactly as shown: setx HOME \"%USERPROFILE%\"\nPress Enter, you should see SUCCESS: Specified value was saved.\nQuit command prompt by typing exit then pressing Enter\n\n\nThis will provide you with both Git and Bash in the Git Bash program.\n\n\n\n\nNote: If you have previously completed the carpentries lesson on Introduction to Shell on your windows computer, you would have already downloaded Git.\n\n\n\n4. Make a Github account\n\nGo to https://github.com and follow the “Sign up” link at the top-right of the window.\nFollow the instructions to create an account.\nVerify your email address with GitHub.\nConfigure multifactor authentication (see Github page on 2FA)\n\nOptional: Add a profile picture and modify other preferences, such as linking ORCID, in your github account.\n\n\n\n\n\n\n\nCaution - chose your email address and username wisely!\n\n\n\n\nUse an email address for Github that you expect to have access to in the future. Your institutional address may not be the best choice.\n\nYour username will become the name all of your collaborators and the github public see, so chose something wise (e.g., your fullname, or a shortened version of it).\n\nYou will need to remember both of these for when we configure git during the workshop.",
    "crumbs": [
      "Part One - Git"
    ]
  },
  {
    "objectID": "episode_24_projects.html",
    "href": "episode_24_projects.html",
    "title": "Projects: books and websites",
    "section": "",
    "text": "First, a challenge: What’s special about this page title? Specifically, what do I need to do when creating this .qmd file to make sure this renders?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThis page title contains a colon. Since colons are used to separate the key-value pair in the page YAML header, I need to make sure that the title is wrapped in quotation marks.",
    "crumbs": [
      "Part Two - Quarto",
      "Projects: books and websites"
    ]
  },
  {
    "objectID": "episode_24_projects.html#aims",
    "href": "episode_24_projects.html#aims",
    "title": "Projects: books and websites",
    "section": "Aims",
    "text": "Aims\n\nRecognise sensible directory structure and appreciate how consistent structure aids reproducibility and collaboration.\n\nUnderstand what a Quarto project is and when to use one.\n\nCreate and configure a basic Quarto project with _quarto.yml.\n\nLearn how _quarto.yml controls project-wide behavior (rendering, format, options).",
    "crumbs": [
      "Part Two - Quarto",
      "Projects: books and websites"
    ]
  },
  {
    "objectID": "episode_24_projects.html#project-directory-structure",
    "href": "episode_24_projects.html#project-directory-structure",
    "title": "Projects: books and websites",
    "section": "Project Directory Structure",
    "text": "Project Directory Structure\nProject structure and management are an important aspect of reproducible research. We want to build habits that support:\nTransparency: Other people (and of course - future you) must be able to understand your workflow.\nReproducibility: Define and clearly show what the expected inputs and outputs are.\nCollaboration: Having a consistent structure makes it easier for collaborators and teams to work together.\nModularity: Each component of a workflow should be something that can be isolated, tested, and reused in new contexts.\n\nKey practices for project layout\nSome key practices to keep in mind include:\n\nSeparate directories for Raw and Processed Data.\n\nRaw and Processed Data will probably be included in your .gitignore file so that it is not uploaded to github.\n\nScripts directories could be split by work stage (e.g., preprocessing/analysis/visualisation) or by type (e.g., R/Bash).\nOutput directories should contain subdirectories for each type of output (figures/tables).\nConfiguration files (_quarto.yml, styles.css, README) should sit in the main project directory.\nGlobal naming convention across projects.\n\n\nAn example directory structure\nmy-genomics-project/\n├── _quarto.yml\n├── index.qmd # Project overview or README\n├── about.qmd # Team/project info\n├── data/\n   ├── raw/\n\n   └── processed/\n├── scripts/\n   ├── qc/\n\n   ├── analysis/\n\n   └── visualizations/\n├── results/\n   ├── figures/\n\n   └── tables/\n├── images/ # Diagrams, logos\n└── docs/ # Optional: exported PDFs or other formats\n\n\nGroup discussion exercise (5 min)\nHave you ever inherited a project that did (or did not) adhere to the above principles? How did this impact you?\nConsider your own current projects. If you (or a supervisor) were to leave work at 5pm and not return, what would the inheritors of this project think?\nHow much work would be involved in getting your current or previous projects from where they are now to a point where you would be happy to receive them?",
    "crumbs": [
      "Part Two - Quarto",
      "Projects: books and websites"
    ]
  },
  {
    "objectID": "episode_24_projects.html#quarto-projects",
    "href": "episode_24_projects.html#quarto-projects",
    "title": "Projects: books and websites",
    "section": "Quarto Projects",
    "text": "Quarto Projects\nSo far we have worked under the assumption that we are creating a single, brief document (e.g., a 10-page pdf, short html document etc.,). A project is a larger structure and will usually contain multiple individual documents all linked together. Examples of projects are books or multi-page websites.\nWe should also think about projects in terms of directory structure. We want to develop the habit of creating a clear and consistent directory structure for each of our projects, one that will be easy for other users to navigate and interpret.\n\nQuarto Projects and _quarto.yml\nSpecifically, a project is a directory that contains a high level file that provides information and structure to the other files: the _quarto.yml file. The _quarto.yml file is required to link individual pages together and provides options for navigation menus. Once a _quarto.yml file is in place in a directory, rendering any .qmd file in the directory will render all files in that directory - but only those that are linked through the _quarto.yml file will appear in the document.\nIf you have been following along you should have two .qmd files (something like “getting-started.qmd” and “code-in-quarto.qmd’ - depends what you named them!). We will now build a new _quarto.yml file and use it to link the two existing pages into a single site. We will break this simple _quarto.yml into three sections: project information, website information, and format information.\n\n\n\n\n\n\nWhat if we don’t want to render a doc in the directory?\n\n\n\n\n\nSometimes a directory will contain files we don’t want to render - they may be large, or basic scratch notes, etc.,. To exclude files from the render process, rename them to start with an underscore (like with the _quarto.yml file).\n\n\n\n\nProject information\nThis file is essentially a YAML header for the whole project. Options here will be global for all files. We can see three discrete blocks of information in the above example:\n\nFirst we specify information about the project itself. This will include specifying the type of project, in this case website but alternatively a book/article/etc.,. Also nested under the project key we are going to specify the output directory for all rendering - we could render straight into the working directory, but we want to abide by good project structure and specify where our output files are going. We need to specify the output dir as “docs” to be able to publish the website later.\nSecond we have a block containing information about the output document. Because we are working on a website, we used the “website:” key and will use this to set the title and add a navigation bar. Under the navigation bar we link all the .qmd files we want to include with this website. When we are manually selecting .qmd files to include we must set both the title with the text argument and the filename with the href argument. There are a lot of additional options available to us in this block such as: top/side navigation bars of different styles, auto-generated contents, LinkedIn/Github icons etc., which we will cover later.\nThird we can control the look of the website with format options. We specify that we are working with an html-type output and can choose from a set of pre-built themes to customise the look of the document. We can also specify a css file, where we provide a styles.css file that further customises our website (e.g., brand colours, hyperlink visuals). We will look at creating a styles.css file later.\n\nAn example _quarto.yml file looks like:\n\n\n\n_quarto.yml\n\n\nRemember, the _quarto.yml file is essentially a YAML header for the whole document and is very fussy about indentation, spacing (between key-value pairs), and all format arguments.\n\n\nExercise: Create your own _quarto.yml, add themes and options (8 min)\n\nCreate a text document in RStudio\nCopy-paste the following text (change file names to your file names!):\n\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"My Quarto Site\"\n  navbar:\n    left:\n      - text: \"Getting started\"\n        href: getting-started.qmd\n      - text: \"Code blocks\"\n        href: code-in-quarto.qmd\n\nformat:\n  html:\n    theme: default\n\nNote: the formatting will go weird if you copy-paste into a new R script. Make sure it is a new text file!\n\n\nSave this file as _quarto.yml\nClick render from one of the existing .qmd files. You cannot render from the _quarto.yml file itself! Alternatively, type quarto preview in the terminal.\nExplore your new webpage! 🥳\nNow, you can change the theme in the _quarto.yml file from default to one of the 25 pre-built options (listed below). Render the document and view the outcome ✨\n\n\n\n\n\n\n\nPre-constructed themes\n\n\n\n\n\ndefault\ncerulean\ncosmo\ncyborg\ndarkly\nflatly\njournal\nlitera\nlumen\nlux\nmateria\nminty\nmorph\npulse\nquartz\nsandstone\nsimplex\nsketchy\nslate\nsolar\nspacelab\nsuperhero\nunited\nvapor\nyeti\nzephyr\n\n\n\n\nOptions: Immediately under the navbar line, add a new line (indented from navbar) and add pinned: true. What effect does this have?",
    "crumbs": [
      "Part Two - Quarto",
      "Projects: books and websites"
    ]
  },
  {
    "objectID": "episode_24_projects.html#summary",
    "href": "episode_24_projects.html#summary",
    "title": "Projects: books and websites",
    "section": "Summary",
    "text": "Summary\n\nSensible directory structures enhance reproducibility and make collaboration easier.\n\nQuarto projects are a directory containing multiple .qmd files linked by a _quarto.yml document.\n\nBasic _quarto.yml files control the structure of the output website/book, and can control all visual elements.",
    "crumbs": [
      "Part Two - Quarto",
      "Projects: books and websites"
    ]
  },
  {
    "objectID": "quarto_overview.html",
    "href": "quarto_overview.html",
    "title": "Quarto Overview",
    "section": "",
    "text": "What is the purpose of Quarto (and it’s equivalent systems)?\n\nHow does Quarto improve reproducibility? What are some examples?\n\nBasic syntax (generate a pdf)\n\nA basic CV or “About me” document\n\nFormatting: headings, lists, bold and italics\n\nEmbed an image, generate a table, headings, italics and bold face\n\nUpgrading to a website\n\nMinimal changes required due to Quarto’s cross-output capabilities\n\nA website could: be an about page (your elevator pitch - an ideal pinned repo), a lab on-boarding page, or a walkthrough of a method with output (“showcasing your story”).\n\nPreview and Render, git and Publishing\n\nPractice practice practice! Theme, styles.\nPublishing with github pages.",
    "crumbs": [
      "Part Two - Quarto"
    ]
  },
  {
    "objectID": "quarto_overview.html#what-is-quarto",
    "href": "quarto_overview.html#what-is-quarto",
    "title": "Quarto Overview",
    "section": "",
    "text": "What is the purpose of Quarto (and it’s equivalent systems)?\n\nHow does Quarto improve reproducibility? What are some examples?\n\nBasic syntax (generate a pdf)\n\nA basic CV or “About me” document\n\nFormatting: headings, lists, bold and italics\n\nEmbed an image, generate a table, headings, italics and bold face\n\nUpgrading to a website\n\nMinimal changes required due to Quarto’s cross-output capabilities\n\nA website could: be an about page (your elevator pitch - an ideal pinned repo), a lab on-boarding page, or a walkthrough of a method with output (“showcasing your story”).\n\nPreview and Render, git and Publishing\n\nPractice practice practice! Theme, styles.\nPublishing with github pages.",
    "crumbs": [
      "Part Two - Quarto"
    ]
  },
  {
    "objectID": "quarto_overview.html#setup-on-local-machine",
    "href": "quarto_overview.html#setup-on-local-machine",
    "title": "Quarto Overview",
    "section": "Setup on local machine",
    "text": "Setup on local machine\nQuarto comes as a part of RStudio, so if you already have RStudio installed you don’t need to do anything extra for this part of the workshop.\nHowever, there are lots of ways you can use and integrate Quarto into your preferred tool:\n\nSee “Get Started” in Quarto docs to install the Quarto command line interface and links to download other compatible tools.",
    "crumbs": [
      "Part Two - Quarto"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html",
    "href": "episode_23_codeBlocks.html",
    "title": "Code in qmd files",
    "section": "",
    "text": "The aims of this section are to:\n\nLearn the fundamentals of code cells in Quarto documents.\n\nBecome familiar with inline coding.\n\nGenerate an html document with well-documented code and embedded output.\n\nReinforce and expand the syntax skills from the previous episode and learn to apply good commenting/documentation habits when working in Quarto.",
    "crumbs": [
      "Part Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html#aims",
    "href": "episode_23_codeBlocks.html#aims",
    "title": "Code in qmd files",
    "section": "",
    "text": "The aims of this section are to:\n\nLearn the fundamentals of code cells in Quarto documents.\n\nBecome familiar with inline coding.\n\nGenerate an html document with well-documented code and embedded output.\n\nReinforce and expand the syntax skills from the previous episode and learn to apply good commenting/documentation habits when working in Quarto.",
    "crumbs": [
      "Part Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html#code-cells",
    "href": "episode_23_codeBlocks.html#code-cells",
    "title": "Code in qmd files",
    "section": "Code cells",
    "text": "Code cells\nCode cells are the “working unit” of code within Quarto. Each code cell will be evaluated and output will be embedded into the document immediately below the code cell. For this reason, it is worth thinking about the size and organisation of the code cell. A reasonable code cell might include loading all the libraries you will use in the analysis, or the generation of a single figure.\nWhen we want to embed code we do so with the use of the ` (“backtick”). Three backticks, followed by a curly bracket, and a symbol for the language our code will be in, signifies the start of a code block. We end the code block with three backticks. When we are within a code cell we can run any line of code, just the same as we would with a basic R markdown or R script document. Code cells are automatically executed as part of the rendering process.\n\n\n\nR Code cell\n\n\n\nNote: In RMarkdown we call these “code chunks” and in Quarto they are referred to as “code cells”.\n\nWe can also insert a code cell using an in-built button in RStudio (the “+” and letter “C” in a green box):\n\n\n\nInsert New Code cell button\n\n\nThere are also keyboard shortcuts: shift + command + I for mac, or windows + alt + I for a Windows machine.\n\nExercise: Insert a code cell (5 min)\nCreate a new quarto document (File &gt; New File &gt; Quarto Document), give it the title “Code in Quarto” and select Create Empty Document\nInsert a new R code cell. You do this by either:\n\nUsing the new code cell button in Visual editor (click the “+” and letter “C” in a green box)\n\nManually adding backticks and curly braces in the Source editor\n\nUsing keyboard shortcuts\n\nIn ‘Source’, it would now look like this:\n\nWithin the code chunk add these two lines:\n\nlibrary(palmerpenguins) \nhead(penguins) \n\nAlso add in comments (this is good reproducibility practise!), for example:\n\n# this function loads the library\n# this shows first 6 lines of the penguin dataframe\n\n\nNote: the palmerpenguins R package has a built-in object called penguins, which is what we are viewing with the head function.\n\nRender the document. You may be prompted to save the file first.\nBecause code cells are executed during rendering, they need to work!\nFor example, if you do not have the palmerpenguins package installed, this cell cannot successfully execute and the render process will fail. Using the # symbol within a code cell will cause that line of text to be ‘commented out’ (i.e., it will be interpreted as plain text, rather than code).\nIn the output document you should see both the code and the output of that code - in this case, the first six rows of the penguin object:\n\nlibrary(palmerpenguins)\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;",
    "crumbs": [
      "Part Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html#code-cell-options",
    "href": "episode_23_codeBlocks.html#code-cell-options",
    "title": "Code in qmd files",
    "section": "Code cell options",
    "text": "Code cell options\nWithin each code cell we can add arguments that modify how the code is interpreted or displayed in the rendered document. We will add this information at the start of the code cell with #| (called the hash pipe).\n\nGlobal code options\nCode options included in the YAML header are global - they will be applied to all code cells in this document. As we will cover below, individual code cells (chunks or blocks of code) can be controlled separately.\nSome useful global options we might want to set in the YAML header are:\ncode-fold: true\ncode-tools: true\nWhen code-fold is set to true, all code blocks will be automatically collapsed. This is useful when you want code to be available but would otherwise distract from the flow of the document e.g., when teaching/training, presenting at lab meetings. code-tools provides a simple button at the top of the html that can then be used to toggle all code to open/closed (an easy ‘reset’ of all code blocks).\n\nEcho and Eval\nHere we will use the #| echo: false command to hide the R code itself from the final doc, while the output is still displayed.\nThe code cell looks like this:\n\nBut rendered document shows only the executed code embedded into the document, like this:\n\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nNote that hash pipe arguments are not displayed!\nAlternatively, we can display the code but not the output with #| eval: false\nWhen eval is set to false we see the code used but the code is not evaluated and no output is embedded into the final document. This is useful for when you want to demonstrate code but not run something that could take a long time or you do not want to over-write the original file.\nThe code cell looks like this:\n\nAnd the rendered document looks like this:\n\ntail(penguins)\n\nNow see for yourself! Try using #| eval: false and #| echo: false and render the document.\n\n\nCross-referencing: figures and tables\nQuarto allows easy cross-referencing to figures and tables.\nWe can attach a label to a code block with #| label:, followed by a given label. We can then use @label to cross-reference.\n\nFigures example:\nOpen a code block.\nDirectly under the header line of your code block, add the text #| label: fig-penguinBills. Then, add some ggplot code to make a figure. We’ll do a simple geom_point() plot here using the palmerpenguins dataset as an example. Then, underneath your code block, write some text cross-referencing the figure label. See our exmaples below:\n\n#| label: fig-penguinBills\n\nlibrary(ggplot2)\nggplot(data = penguins,\n       mapping = aes(x = bill_depth_mm,\n                     y = bill_length_mm,\n                     colour = species,\n                     shape = species)) +\n         geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nFigure 1\n\n\n\n\n\nSee Figure 1 for a positive correlation between bill depth and bill length.\n\n\n\n\n\n\nWhat is happening above (behind the scenes)?\n\n\n\n\n\nIn the qmd file used to build the website you are looking at right now, the code block above contains two #| lines:\n#| label: fig-penguinBills\nThe first label line directly under the start of the code block (indicated by ```{r} ) tells the code block to cross-reference this figure using the label “fig-penguinBills”.\nThen, the line #| label: fig-penguinBills is repeated, so that you can see it in the code block above. As it is separated from the start of the code block by a line, it gets read by r as a commented out line, the same as any line starting with a #.\nBelow the code block the text reads:\nSee @fig-penguinBills for a positive correlation between bill depth and bill length.\nHere, the @fig-penguinBills automatically gets converted to the text “Figure 1”, with a clickable link.\nConfused? Here are pictures of the full code and output:\nCode behind the scenes:\n\nOutput:\n\n\n\n\n\n\nTables example:\nFor cross referencing tables it is very similar to figures, but instead we use the tbl prefix, and we can also add a Table caption using #| tbl-cap: For example:\n\n#| label: 'tbl-penguin-mass-summary'\n#| tbl-cap: 'Penguin Mean Body Weights'\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(gt)\n\npenguins |&gt; \n  group_by(island) |&gt;\n  summarise(mean_body_mass_g = mean(body_mass_g, na.rm = TRUE)) |&gt;\n  gt() |&gt;\n  fmt_number(mean_body_mass_g) |&gt;\n  cols_label(island =\"Island\", \n              mean_body_mass_g = \"Mean Body Mass (g)\") |&gt;\n  cols_align(columns = island, align = \"left\")\n\n\n\nTable 1: Penguin Mean Body Weights\n\n\n\n\n\n\n\n\n\nIsland\nMean Body Mass (g)\n\n\n\n\nBiscoe\n4,716.02\n\n\nDream\n3,712.90\n\n\nTorgersen\n3,706.37\n\n\n\n\n\n\n\n\n\n\nAnd cross referencing is done in a similar matter by using the label, e.g. using @tbl-penguin-mass-summary gives us the cross-reference Table 1, which is automatically converted to the words “Table 1” with the hyperlink.\nNow you try it out!\n\nWant more? For more ways to cross-reference, see the Quarto docs here.\n\n\n\n\nWarnings and messages\nWe can suppress warning and other messages from code outputs by adding:\n#| warning: false will suppress warnings from code output. This can be very useful when you have a warning that is showing up repeatedly. We recommend printing the warning once and noting that it will be suppressed in all future cases.\n#| message: false will suppress all messages, for example attached packages and masked package messages.\n\nExercise: remove messages and warnings (2 min)\nIn the above examples for tables and figures we saw both warning and messages. Try adding either #| warning: false or #| message:false to the ggplot code cells above, and re-render the document to confirm warnings/messages have disappeared.\n\n\n\n\n\n\nSolution\n\n\n\n\n\nFigure without warning:\n\n#| label: fig-penguinBillsNoWarning\n#| warning: false\n\nlibrary(ggplot2)\nggplot(data = penguins,\n       mapping = aes(x = bill_depth_mm,\n                     y = bill_length_mm,\n                     colour = species,\n                     shape = species)) +\n         geom_point()\n\n\n\n\n\n\n\nFigure 2\n\n\n\n\n\nNote that we cannot use the same label twice within a document, so we need to use a new label (penguinBillsNoWarning) or the render will fail.\nTable without message:\n\n#| message: false # hide the messages from loading dplyr\n#| label: 'tbl-penguin-mass-summary-NoMessage'\n\nlibrary(dplyr)\nlibrary(gt)\n\npenguins |&gt; \n  group_by(island) |&gt;\n  summarise(mean_body_mass_g = mean(body_mass_g, na.rm = TRUE)) |&gt;\n  gt() |&gt;\n  fmt_number(mean_body_mass_g) |&gt;\n  cols_label(island =\"Island\", \n              mean_body_mass_g = \"Mean Body Mass (g)\") |&gt;\n  cols_align(columns = island, align = \"left\")\n\n\n\nTable 2\n\n\n\n\n\n\n\n\n\nIsland\nMean Body Mass (g)\n\n\n\n\nBiscoe\n4,716.02\n\n\nDream\n3,712.90\n\n\nTorgersen\n3,706.37\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSet figure dimensions\n#| fig-width: x and #| fig-length: y can be used to manually set the dimension of embedded figures, in inches.",
    "crumbs": [
      "Part Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html#inline-code",
    "href": "episode_23_codeBlocks.html#inline-code",
    "title": "Code in qmd files",
    "section": "Inline code",
    "text": "Inline code\nInline code refers to code that is used within the document but is not stored separately in a code cell. The purpose of inline code is to embed the output directly into the document text.\nFor example, if we wanted to describe the mean bill length for the Adelie species of penguins in the penguins object, we could manually calculate the value and then add a written statement:\n\nround(mean(na.omit(penguins$bill_length_mm)),2)\n\n[1] 43.92\n\n# The mean bill length of penguins in the dataset is 43.92mm.\n\nTo streamline the above with inline code we need to do three things:\n\nWrite the text statement and open a set of backticks (`).\nSpecify the language (in this case, R).\nInclude the code to be evaluated.\n\nThis is demonstrated below, using quotation marks in place of backticks so that it is human readable:\nThe mean bill length of penguins in the dataset is \"r round(mean(na.omit(penguins$bill_length_mm)),2)\"mm.\nThe same line of code above but with backticks in place of quotation marks is rendered as:\nThe mean bill length of penguins in the dataset is 43.92mm.\n\nWhy use inline code?\nThe key reason for using inline code is reproducibility. If you need to re-run your analysis, or update an input file, your statements will automatically be updated to reflect the new data. This has the additional benefit of reducing human error: avoids copy-paste errors (or copy and writing errors) between the calculated values and the value stated in text and ensures that all instances of this value are identical (e.g., if this value is referred to repeatedly).\n\nGood practice for inline code\n\nRemember that while the final document will have the evaluated output, the document you (or a collaborator) are working on will have the code embedded. Therefore, keep inline code simple and short. If the code required is lengthy, consider moving this to a code cell and storing the output as an object. Then use the object as part of the inline code.\nDo not use inline code in Quarto headings (it will not be evaluated).\nMake use of the round() function to control the number of decimal places.\nRemember to include na.omit() if appropriate. Data may not currently include NAs, but if you think the data could be updated in future this may cause issues.\nAdd comments within code cells or as appropriate so that readers know where the values are coming from.",
    "crumbs": [
      "Part Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html#summary",
    "href": "episode_23_codeBlocks.html#summary",
    "title": "Code in qmd files",
    "section": "Summary",
    "text": "Summary\nIn this section we have:\n\nEmbedded code cells and modified their behaviour with the hash-pipe.\nEmbedded output, including figures, and made this output cross-referencable with the use of the label option.\nUsed inline code to improve reproducibility in our document.",
    "crumbs": [
      "Part Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html#exit-exercises",
    "href": "episode_23_codeBlocks.html#exit-exercises",
    "title": "Code in qmd files",
    "section": "Exit exercises",
    "text": "Exit exercises\n\nWhat are the three methods for inserting a new code cell?\nWhat symbols do we add to set the code cell options?\nIf a code cell has echo: false and eval: true, what will happen when the document is rendered?\nList one other code cell option we have used today.\nGive two reasons you might use to convince a co-worker to use inline code.",
    "crumbs": [
      "Part Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_05_Push-Github.html",
    "href": "episode_05_Push-Github.html",
    "title": "Pushing local changes to GitHub",
    "section": "",
    "text": "Key points\n\n\n\n\nConnect local repositories to GitHub using git remote add origin\nSet up SSH key pairs once per computer\nUse git push origin main to upload changes from your local repository to GitHub\n\n\n\nNow that we have added and committed our changes, we need to push the changes from our local computer, on to the Github server.\nFirst, we need to set up the remote repository on Github which is linked to our local repository.\n\n\nLog in to GitHub, then click on the icon in the top right corner to create a new repository called recipes:\n\nName your repository “recipes” and then click “Create Repository”.\n\nNote: Since this repository will be connected to a local repository, it needs to be empty. Leave “Initialize this repository with a README” unchecked, and keep “None” as options for both “Add .gitignore” and “Add a license.”\n\n\nAs soon as the repository is created, GitHub displays a page with a URL and some information on how to configure your local repository:\n\n\n\n\nNow we connect the two repositories. We do this by making the GitHub repository a remote for the local repository. The home page of the repository on GitHub includes the URL string we need to identify it.\nClick on the ‘SSH’ link to change the protocol from HTTPS to SSH and copy that URL from the browser.\n\nGo into the local recipes repository, and run this command:\n(Make sure to use the URL for your repository!)\ngit remote add origin &lt;git@github.com:username/recipes.git&gt;\nHint: don’t type the &lt;&gt; around the URL.\nWe can check that the command has worked by running git remote -v:\ngit remote -v\norigin  git@github.com:githubusername/recipes.git (fetch)\norigin  git@github.com:githubusername/recipes.git (push)\n\n\n\nBefore you can connect to a remote repository, you need to set up a way for your computer to authenticate with GitHub so it knows it’s you trying to connect to your remote repository.\nWe are going to set up the method that is commonly used by many different services to authenticate access on the command line. This method is called Secure Shell Protocol (SSH). SSH is a cryptographic network protocol that allows secure communication between computers using an otherwise insecure network.\nSSH uses what is called a key pair. This is two keys that work together to validate access. One key is publicly known and called the public key, and the other key called the private key is kept private. Very descriptive names.\nYou can think of the public key as a padlock, and only you have the key (the private key) to open it. You use the public key where you want a secure method of communication, such as your GitHub account. You give this padlock, or public key, to GitHub and say “lock the communications to my account with this so that only computers that have my private key can unlock communications and send git commands as my GitHub account.”\nWhat we will do now is the minimum required to set up the SSH keys and add the public key to a GitHub account.\nThe first thing we are going to do is check if this has already been done on the computer you’re on. Because generally speaking, this setup only needs to happen once and then you can forget about it.\nWe will run the list command to check what key pairs already exist on your computer.\nls -al ~/.ssh\nYour output is going to look a little different depending on whether or not SSH has ever been set up on the computer you are using.\nIf you have not set up SSH before on your computer, you will get an output something like this:\nls: cannot access '/c/Users/username/.ssh': No such file or directory\nIf SSH has been set up on the computer you’re using, the public and private key pairs will be listed. The file names are either id_ed25519/id_ed25519.pub or id_rsa/id_rsa.pub depending on how the key pairs were set up.\nIf you have set up SSH before on your computer, you will get an output something like this:\ndrwxr-xr-x  1 Username   197121   0 Jul 16 14:48 ./\ndrwxr-xr-x  1 Username   197121   0 Jul 16 14:48 ../\n-rw-------@ 1 Username  staff   467 Sep 25 16:10 config\n\n\nTo create an SSH key pair, use this command, where the -t option specifies which type of algorithm to use and -C attaches a comment to the key (here, use your email):\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nIf you are using a legacy system that doesn’t support the Ed25519 algorithm, use: $ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/Users/username/.ssh/id_ed25519):\nWe want to use the default file, so just press Enter.\nIt will now ask you for a passphrase. For now, you may find it easier to not set one (just press Enter).\nEnter passphrase (empty for no passphrase): \nIf you do chose to set one, be sure to use something memorable or write down your passphrase somewhere, as there is no “reset my password” option. Note that, when typing a passphrase on a terminal, there won’t be any visual feedback of your typing. This is normal: your passphrase will be recorded even if you see nothing changing on your screen.\n\n\n\n\n\n\nWhat is a passphrase?\n\n\n\n\n\nA passphrase is a phrase of four or more random unrelated words, generally a length of at least 15 characters. You can also include upper/lowercase and numbers/symbols to make it more secure.\nSome examples are:\npurpleduck!potatoboat\nredhou5eSkytrain\nsl33pfreeHardidea\n\n\n\n\n\n\n\n\n\nWant to set or remove the passphrase, or avoid typing it?\n\n\n\n\n\nSet or remove the passphrase:\nssh-keygen -p -f ~/.ssh/id_ed25519\nIt will ask:\n\nEnter old passphrase: (type your current one, or press enter if you did not set one): press Enter\n\nEnter new passphrase (empty for no passphrase, or chose one here): press Enter\n\nEnter same passphrase again: press Enter\n\nThis rewrites the key with or without a passphrase. Caution! There is no ‘passphrase reset’ if you forgot your passphrase. Rewriting only works if you know what your passphrase is.\nAvoid typing it\nOn macOS, you can set up an SSH agent and store the passphrase in the macOS keychain, so you don’t have to type it every time you push and pull.\n\nStart the agent\n\neval \"$(ssh-agent -s)\"\n\nAdd your key and store the passphrase in the macOS Keychain:\n\nssh-add --apple-use-keychain ~/.ssh/id_ed25519\n(replace id_ed25519 with your key filename if different)\n\nTell SSH to always use the Keychain. Add this to ~/.ssh/config (create the file if it doesn’t exist):\n\nHost github.com\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/id_ed25519\n\n\n\nEnter same passphrase again:\nAfter entering the same passphrase a second time (or press Enter again for no passphrase), we receive the confirmation:\nYour identification has been saved in /Users/username/.ssh/id_ed25519\nYour public key has been saved in /Users/username/.ssh/id_ed25519.pub\nThe key fingerprint is:\nSHA256:SMSPIStNyA00KPxuYu94KpZgRAYjgt9g4BA4kFy3g1o your_email@example.com\nThe key's randomart image is:\n+--[ED25519 256]--+\n|^B== o.          |\n|%*=.*.+          |\n|+=.E =.+         |\n| .=.+.o..        |\n|....  . S        |\n|.+ o             |\n|+ =              |\n|.o.o             |\n|oo+.             |\n+----[SHA256]-----+\nThe “identification” is actually the private key. You should never share it. The public key is appropriately named. The “key fingerprint” is a shorter version of a public key.\nNow that we have generated the SSH keys, we will find the SSH files when we check.\nls -al ~/.ssh\ndrwxr-xr-x 1 username   197121   0 Jul 16 14:48 ./\ndrwxr-xr-x 1 username   197121   0 Jul 16 14:48 ../\n-rw-r--r-- 1 username   197121 419 Jul 16 14:48 id_ed25519\n-rw-r--r-- 1 username   197121 106 Jul 16 14:48 id_ed25519.pub\n\n\n\nFirst, we need to copy the public key. Be sure to include the .pub at the end, otherwise you’re looking at the private key.\ncat ~/.ssh/id_ed25519.pub\nNow, going to GitHub.com, click on your profile icon in the top right corner to get the drop-down menu. Click “Settings”, then on the settings page, click “SSH and GPG keys”, on the left side “Access” menu. Click the “New SSH key” button on the right side.\n\nNow, you can add the title (Use a title such as “My macbook pro laptop” so you can remember where the original key pair files are located), paste your SSH key into the field, and click the “Add SSH key” to complete the setup.\n\nNow we have a SSH key pair and we can run this command to check if GitHub can read our authentication.\nssh -T git@github.com\nHi username! You've successfully authenticated, but GitHub does not provide shell access.\n\n\n\n\n\n\nSee a “The authenticity of host…can’t be established” message?\n\n\n\n\n\nIf you see a message like this:\nThe authenticity of host 'github.com (4.237.22.38)' can't be established.\nED25519 key fingerprint is SHA256:SOME-KEY-ID\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\nType yes\nThen, you’ll see a message like this, and it will ask for your passphrase:\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\nEnter passphrase for key '/Users/username/.ssh/id_ed25519': \nEnter your passphrase, then you should get a success message:\n\n\n\nGood! This output confirms that the SSH key works as intended. We are now ready to push our work to the remote repository.\n\n\n\nNote: Once you have set up your SSH key on your local computer, you won’t have to do all this (i.e., section 3) again next time you make a new repository.\n\n\n\n\n\nNow that authentication is setup, we can return to the remote. This command will push the changes from our local repository to the repository on GitHub:\ngit push origin main\n\nIf you set up a passphrase, it will prompt you for it every time you push or pull. This is more secure, but can be a nuisance.\n\nAfter pushing, we should see something like this:\nEnumerating objects: 16, done.\nCounting objects: 100% (16/16), done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (11/11), done.\nWriting objects: 100% (16/16), 1.45 KiB | 372.00 KiB/s, done.\nTotal 16 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), done.\nTo https://github.com/username/recipes.git\n * [new branch]      main -&gt; main\nNow go to your github and have a look - your new recipe repository with the guacamole.qmd file should be online!",
    "crumbs": [
      "Part One - Git",
      "Pushing local changes to GitHub"
    ]
  },
  {
    "objectID": "episode_05_Push-Github.html#create-a-remote-repository",
    "href": "episode_05_Push-Github.html#create-a-remote-repository",
    "title": "Pushing local changes to GitHub",
    "section": "",
    "text": "Log in to GitHub, then click on the icon in the top right corner to create a new repository called recipes:\n\nName your repository “recipes” and then click “Create Repository”.\n\nNote: Since this repository will be connected to a local repository, it needs to be empty. Leave “Initialize this repository with a README” unchecked, and keep “None” as options for both “Add .gitignore” and “Add a license.”\n\n\nAs soon as the repository is created, GitHub displays a page with a URL and some information on how to configure your local repository:",
    "crumbs": [
      "Part One - Git",
      "Pushing local changes to GitHub"
    ]
  },
  {
    "objectID": "episode_05_Push-Github.html#connect-local-to-remote-repository",
    "href": "episode_05_Push-Github.html#connect-local-to-remote-repository",
    "title": "Pushing local changes to GitHub",
    "section": "",
    "text": "Now we connect the two repositories. We do this by making the GitHub repository a remote for the local repository. The home page of the repository on GitHub includes the URL string we need to identify it.\nClick on the ‘SSH’ link to change the protocol from HTTPS to SSH and copy that URL from the browser.\n\nGo into the local recipes repository, and run this command:\n(Make sure to use the URL for your repository!)\ngit remote add origin &lt;git@github.com:username/recipes.git&gt;\nHint: don’t type the &lt;&gt; around the URL.\nWe can check that the command has worked by running git remote -v:\ngit remote -v\norigin  git@github.com:githubusername/recipes.git (fetch)\norigin  git@github.com:githubusername/recipes.git (push)",
    "crumbs": [
      "Part One - Git",
      "Pushing local changes to GitHub"
    ]
  },
  {
    "objectID": "episode_05_Push-Github.html#ssh-setup-and-key-pair-do-this-once-per-local-machine",
    "href": "episode_05_Push-Github.html#ssh-setup-and-key-pair-do-this-once-per-local-machine",
    "title": "Pushing local changes to GitHub",
    "section": "",
    "text": "Before you can connect to a remote repository, you need to set up a way for your computer to authenticate with GitHub so it knows it’s you trying to connect to your remote repository.\nWe are going to set up the method that is commonly used by many different services to authenticate access on the command line. This method is called Secure Shell Protocol (SSH). SSH is a cryptographic network protocol that allows secure communication between computers using an otherwise insecure network.\nSSH uses what is called a key pair. This is two keys that work together to validate access. One key is publicly known and called the public key, and the other key called the private key is kept private. Very descriptive names.\nYou can think of the public key as a padlock, and only you have the key (the private key) to open it. You use the public key where you want a secure method of communication, such as your GitHub account. You give this padlock, or public key, to GitHub and say “lock the communications to my account with this so that only computers that have my private key can unlock communications and send git commands as my GitHub account.”\nWhat we will do now is the minimum required to set up the SSH keys and add the public key to a GitHub account.\nThe first thing we are going to do is check if this has already been done on the computer you’re on. Because generally speaking, this setup only needs to happen once and then you can forget about it.\nWe will run the list command to check what key pairs already exist on your computer.\nls -al ~/.ssh\nYour output is going to look a little different depending on whether or not SSH has ever been set up on the computer you are using.\nIf you have not set up SSH before on your computer, you will get an output something like this:\nls: cannot access '/c/Users/username/.ssh': No such file or directory\nIf SSH has been set up on the computer you’re using, the public and private key pairs will be listed. The file names are either id_ed25519/id_ed25519.pub or id_rsa/id_rsa.pub depending on how the key pairs were set up.\nIf you have set up SSH before on your computer, you will get an output something like this:\ndrwxr-xr-x  1 Username   197121   0 Jul 16 14:48 ./\ndrwxr-xr-x  1 Username   197121   0 Jul 16 14:48 ../\n-rw-------@ 1 Username  staff   467 Sep 25 16:10 config\n\n\nTo create an SSH key pair, use this command, where the -t option specifies which type of algorithm to use and -C attaches a comment to the key (here, use your email):\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nIf you are using a legacy system that doesn’t support the Ed25519 algorithm, use: $ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/Users/username/.ssh/id_ed25519):\nWe want to use the default file, so just press Enter.\nIt will now ask you for a passphrase. For now, you may find it easier to not set one (just press Enter).\nEnter passphrase (empty for no passphrase): \nIf you do chose to set one, be sure to use something memorable or write down your passphrase somewhere, as there is no “reset my password” option. Note that, when typing a passphrase on a terminal, there won’t be any visual feedback of your typing. This is normal: your passphrase will be recorded even if you see nothing changing on your screen.\n\n\n\n\n\n\nWhat is a passphrase?\n\n\n\n\n\nA passphrase is a phrase of four or more random unrelated words, generally a length of at least 15 characters. You can also include upper/lowercase and numbers/symbols to make it more secure.\nSome examples are:\npurpleduck!potatoboat\nredhou5eSkytrain\nsl33pfreeHardidea\n\n\n\n\n\n\n\n\n\nWant to set or remove the passphrase, or avoid typing it?\n\n\n\n\n\nSet or remove the passphrase:\nssh-keygen -p -f ~/.ssh/id_ed25519\nIt will ask:\n\nEnter old passphrase: (type your current one, or press enter if you did not set one): press Enter\n\nEnter new passphrase (empty for no passphrase, or chose one here): press Enter\n\nEnter same passphrase again: press Enter\n\nThis rewrites the key with or without a passphrase. Caution! There is no ‘passphrase reset’ if you forgot your passphrase. Rewriting only works if you know what your passphrase is.\nAvoid typing it\nOn macOS, you can set up an SSH agent and store the passphrase in the macOS keychain, so you don’t have to type it every time you push and pull.\n\nStart the agent\n\neval \"$(ssh-agent -s)\"\n\nAdd your key and store the passphrase in the macOS Keychain:\n\nssh-add --apple-use-keychain ~/.ssh/id_ed25519\n(replace id_ed25519 with your key filename if different)\n\nTell SSH to always use the Keychain. Add this to ~/.ssh/config (create the file if it doesn’t exist):\n\nHost github.com\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/id_ed25519\n\n\n\nEnter same passphrase again:\nAfter entering the same passphrase a second time (or press Enter again for no passphrase), we receive the confirmation:\nYour identification has been saved in /Users/username/.ssh/id_ed25519\nYour public key has been saved in /Users/username/.ssh/id_ed25519.pub\nThe key fingerprint is:\nSHA256:SMSPIStNyA00KPxuYu94KpZgRAYjgt9g4BA4kFy3g1o your_email@example.com\nThe key's randomart image is:\n+--[ED25519 256]--+\n|^B== o.          |\n|%*=.*.+          |\n|+=.E =.+         |\n| .=.+.o..        |\n|....  . S        |\n|.+ o             |\n|+ =              |\n|.o.o             |\n|oo+.             |\n+----[SHA256]-----+\nThe “identification” is actually the private key. You should never share it. The public key is appropriately named. The “key fingerprint” is a shorter version of a public key.\nNow that we have generated the SSH keys, we will find the SSH files when we check.\nls -al ~/.ssh\ndrwxr-xr-x 1 username   197121   0 Jul 16 14:48 ./\ndrwxr-xr-x 1 username   197121   0 Jul 16 14:48 ../\n-rw-r--r-- 1 username   197121 419 Jul 16 14:48 id_ed25519\n-rw-r--r-- 1 username   197121 106 Jul 16 14:48 id_ed25519.pub\n\n\n\nFirst, we need to copy the public key. Be sure to include the .pub at the end, otherwise you’re looking at the private key.\ncat ~/.ssh/id_ed25519.pub\nNow, going to GitHub.com, click on your profile icon in the top right corner to get the drop-down menu. Click “Settings”, then on the settings page, click “SSH and GPG keys”, on the left side “Access” menu. Click the “New SSH key” button on the right side.\n\nNow, you can add the title (Use a title such as “My macbook pro laptop” so you can remember where the original key pair files are located), paste your SSH key into the field, and click the “Add SSH key” to complete the setup.\n\nNow we have a SSH key pair and we can run this command to check if GitHub can read our authentication.\nssh -T git@github.com\nHi username! You've successfully authenticated, but GitHub does not provide shell access.\n\n\n\n\n\n\nSee a “The authenticity of host…can’t be established” message?\n\n\n\n\n\nIf you see a message like this:\nThe authenticity of host 'github.com (4.237.22.38)' can't be established.\nED25519 key fingerprint is SHA256:SOME-KEY-ID\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\nType yes\nThen, you’ll see a message like this, and it will ask for your passphrase:\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\nEnter passphrase for key '/Users/username/.ssh/id_ed25519': \nEnter your passphrase, then you should get a success message:\n\n\n\nGood! This output confirms that the SSH key works as intended. We are now ready to push our work to the remote repository.\n\n\n\nNote: Once you have set up your SSH key on your local computer, you won’t have to do all this (i.e., section 3) again next time you make a new repository.",
    "crumbs": [
      "Part One - Git",
      "Pushing local changes to GitHub"
    ]
  },
  {
    "objectID": "episode_05_Push-Github.html#push-local-changes-to-a-remote",
    "href": "episode_05_Push-Github.html#push-local-changes-to-a-remote",
    "title": "Pushing local changes to GitHub",
    "section": "",
    "text": "Now that authentication is setup, we can return to the remote. This command will push the changes from our local repository to the repository on GitHub:\ngit push origin main\n\nIf you set up a passphrase, it will prompt you for it every time you push or pull. This is more secure, but can be a nuisance.\n\nAfter pushing, we should see something like this:\nEnumerating objects: 16, done.\nCounting objects: 100% (16/16), done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (11/11), done.\nWriting objects: 100% (16/16), 1.45 KiB | 372.00 KiB/s, done.\nTotal 16 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), done.\nTo https://github.com/username/recipes.git\n * [new branch]      main -&gt; main\nNow go to your github and have a look - your new recipe repository with the guacamole.qmd file should be online!",
    "crumbs": [
      "Part One - Git",
      "Pushing local changes to GitHub"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html",
    "href": "episode_22_gettingStarted.html",
    "title": "Getting Started",
    "section": "",
    "text": "In this workshop we will need to work publicly (which is scary). We will create a public GitHub repo to work from, and in the first stages of this workshop we will generate a local file (for ease, we will create a basic .html file, but the concepts will be the same as for creating a word doc or pdf). We will then update this file to become a webpage which to function as an ‘about me’ page or to showcase your work. We recommend pinning this repo (which we will demonstrate) so that when someone visits your GitHub, they can view useful information about you.\n\n\nGo to GitHub, under “Repositories”, click New, give your new repo a name and description.\nWe won’t need this beyond today, so you can call it something like my-test-repo if you like. Make sure the “public” box is checked (this should occur by default).\nClick on the green “Code” button, and copy the url for the repo.\nFrom RStudio, go File &gt; New Project &gt; Version Control &gt; Git. Paste in the repo URL, provide a project directory name, and select the location for the project. Click Create Project\n\n\n\n\nWe can now create our first quarto (.qmd) file.\nUnder File &gt; New File, click Quarto Document. Alternatively, use the button that looks like a blank page with a white “+” inside a green circle, and select Quarto Document. This will bring up a panel for creating a new quarto document:\n\n\n\nNew Quarto doc panel\n\n\nOn the left hand side we can see three options: Document, Presentation, and Interactive, and for each of these we can see there are different outputs. We can change these outputs later, but for now, select Document and HTML (this is the recommended format for working in). Give this document a title, something like “Basic About Page”. Before we create the document, we can see a couple of other options: Engine (leave this as Knitr), Editor (we will keep the visual editor box ticked), and then we can either click Create or Create Empty Document. For now, click on Create\nThis creates and opens a new document for us to write in. We can note three things:\nFirst, at the very top of our document is something called the YAML header. The YAML header is information about the document, and is always contained within two sets of three dashes. The YAML header sets things like the document title, subtitle, author, and the output file, as well as a lot of extra information. We will cover the YAML header in more detail shortly.\nSecond, we can see this document is not blank - it comes pre-populated with some information about Quarto and how to run code (if we don’t want to see this information, we could use the ‘Create Empty Document’ button). These are often useful reminders when you are getting started, but once you are more familiar with Quarto you will delete these.\nThird, this already looks like a document - that’s because we are currently in the ‘Visual’ editor mode. We can click on the ‘Source’ button to enter editor mode and see the markdown syntax.\n\n\n\nVisual Editor mode is active\n\n\n\n\n\nSource Editor mode is active\n\n\nYou might also notice that within the YAML header there is a line selecting editor. While this says “visual” in both of the images above, we have manually over-ridden that with the inbuilt buttons in RStudio.\n\n\nNote three pieces of markdown syntax in the Source editor and how this translates into the Visual editor.\n\n\n\n\n\n\nSolution: three pieces of syntax in the source editor\n\n\n\n\n\n\n## - sets the Header level. Two # is “level 2”, three # is “level 3” (a smaller header). Note how these appear as headings in the Outline panel in RStudio.\n** - when a word is surrounded by the double * it will become bold. Using a single * around a word will be interpreted as italics.\n&lt;&gt; - are used to create a link. A word can also be embedded as a hyperlink by surrounding it with square brackets followed by the link itself in round brackets i.e., [this is the link text](https://this-is-the-URL.com)\n\n\nWe will cover more syntax shortly. Almost anything you would like to do can be achieved and is covered on the Quarto website.\n\n\n\n\n\n\nExtra for experts\n\n\n\n\n\nIf ## designates a header, and this workshop itself is written in Quarto, then why isn’t the line above coming up as a header?\nGood catch! We have done something extra here called ‘escaping’. When you need to specify a character like a # or an * that is used for special syntax, you can add a \\ (a backslash) first. This means that the next symbol will appear as-is in the document, rather than being translated as markdown.\n\n\n\n\n\n\n\n\n\n\n\n\nYou may chose to almost exclusively use the Source Editor, which has the advantage of helping you learn the markdown language. This is useful if you want to work on your documents while you are away from RStudio (for example, Visual Studio Code (VSCode) is a popular tool, which we are using to write this workshop, and it doesn’t have the same visual editor).\nYou may prefer to use the Visual Editor, which has the advantage of speed and convenience - you can use basic buttons to add bold or italic text, embed links, insert tables etc.,.\nToday you can use one or the other, and we will try and demonstrate some of each.\n\n\nTo start: in the quarto document highlight everything outside of the yaml header (everything below the bottom three dashes) and delete it.\nMove to the Visual Editor, and use the toolbar buttons to:\n\nInsert a piece of Bold font.\nInsert a piece of italic font.\nSelect and highlight a piece of text (using the &lt;/&gt; button).\nAdd a heading above these bits of text you have just created (using the drop-down button called Normal to chose Header levels).\nAdd a numeric list with three different items on it.\nEmbed a link to the GitHub repo for this workshop: https://github.com/GenomicsAotearoa/reproducibility_with_git_and_quarto (use the chain-link button).\nFinally, insert an example table with column headers and some example text.\n\nOnce you have completed these tasks, switch back and forth between the Visual and Source Editor to see how these different effects are done with markdown.\n\n\n\nWe can also use superscript and subscript, by surrounding text with ^ or ~ respectively, and strikeout text using double ~~ on either side of the word.\n\n\n\nMarkdown Syntax\nVisual Output\n\n\n\n\nsuper^script^\nsuperscript\n\n\nsub~script~\nsubscript\n\n\n~~strikeout~~\nstrikeout\n\n\n\nParagraphs (and items in lists) need to be separated by an empty line. If there is no empty line between paragraphs, they will be interpreted as having a space between them.\nIf you are writing lists manually (i.e., not using the Visual editor option) you can either add unnumbered lists with an asterisk * or a hypen - or you can add numbered lists with any number followed by a fullstop at the start of the line.\n\n\n\n\n\n\nHints:\n\n\n\n\nNote that any number works (try writing a bullet point list with 1. 2. 2. 4. 5. to start each line!). Quarto will automatically sort the numbers, which means you can number lists and then easily add additional points anywhere along the list.\n\nSometimes an ‘Enter’ or ‘Return’ to make a new line is not enough. You may also need to add two spaces at the end of the top line, if the subsequent line is appearing on the preceding.\n\n\n\n\n\n\nSave your Quarto file (CTRL + S or CMD + S), give it a name if you have not already (e.g., getting-started.qmd) and save it into the directory you made earlier (mine is called my-test-repo).\nNow back in RStudio, click the ‘Render’ button, which will simultaneously open up a Preview. You can change the Preview settings by clicking the settings button next to the Render button. The Preview can either be viewed in a new window or in a panel in RStudio.\n\nAlternatively, you can preview and render a document on the command line (e.g., in terminal in RStudio, type):\nquarto preview getting-started.qmd\nThis should also open a Preview window automatically in your browser.\nAs you make changes on your .qmd file, every time you save the document the Preview will update.\nHit CTRL + C back in terminal to exit preview mode.\n\nNote: quarto preview is great for live viewing, but we always need to generate our final output with quarto render. More on rendering later in this workshop!\n\n\n\n\n\nAt the top of each .qmd document we create, we will need a YAML header. YAML (Yet Another Markup Language or YAML Ain’t Markup Language) is placed at the very top of the document and is used to define the document metadata and output settings.\nFor a single document, like we have here, we will provide all of our information in this YAML header.\nFor a larger project, like a book or webpage we will provide a separate document with global information and the individual page YAML headers will be minimal.\n\nOne thing to note about YAML headers: they are fussy. Information within the YAML header must be stored between two lines each containing three dashes. When providing arguments you must provide both parts of the key-value pair, must use nesting where appropriate, and you must pay attention to indentation.\n\n\n\nArguments are provided in key-value pairs with a specific format.\n\n\ntitle: \"A grand yet succint paper title\"\nNote that technically you do not need to put the title itself in quotation marks, but you do need them if you want to include things like a colon (otherwise, the YAML header will attempt to interpret the colon).\n\n\n\nTo list an author on the document, we use the following key-value pair:\nauthor: Barbara McClintock\nAdd your own name as the author of the document, render or preview the document and confirm it has worked.\n\n\n\n\n\n\nAdding multiple authors\n\n\n\n\n\nThere are two ways for this to work, and more ways for it to fail.\nOne way to add authors is to include them on the same line, separated by commas:\nauthor: Barbara McClintock, Marie Curie\nNote that in this case, while we can read them as separate authors, it would be more accurate to call this a single author with a long and confusing name.\nThe correct way to include multiple authors is to list each author on a separate line under author, with each line starting with a dash:\nauthor:\n- Barbara McClintock\n- Marie Curie\nThis is an example of nesting, where we are providing multiple input sources under a single key. If we break the format (e.g., by having author: name on one line and -name on the next line) we will get an error message and the document will not render. This is a good demonstration of how YAML headers can be fussy.\nYou can also list multiple authors within [], with each author separated by commas:\nauthor: [Barbara McClintock, Marie Curie]\n\n\n\n\n\n\nThe basic format for date is:\ndate: 29-05-25\nThere are a lot of different formats we can use for date formats:\nMM/dd/yyyy\nMM-dd-yyyy\nMM/dd/yy\nMM-dd-yy\nyyyy-MM-dd\ndd MM yyyy\nMM dd, yyyy\nYYYY-MM-DDTHH:mm:ssZ\nThese options have a hierarchy. That means that Quarto will attempt to interpret the date in the order of formats above. In practice, this means that\ndate: 05/06/2025\nWill be interpreted as May 6th, 2025.\nFor the date:\ndate: 13/07/2025\nQuarto will first attempt to read it as month/date/year, but since that doesn’t work it will be intepreted as “The 7th day, 13 months from the start of 2025” - January 7th, 2026.\nFor this reason I strongly recommend using one of two options:\ndate: today The current local date.\ndate: last-modified The last date the input file was modified.\nClick save, and watch your Preview update.\n\n\n\nIt’s important to include this information in even our most basic documents. Clear authoring is required for fair attribution and for directing readers in terms of who to contact.\nUsing a last-modified date format helps the reader to understand the timeline of the file, such as what public data or software versions were available at the time of last render.\n\n\n\n\nWhen we want to output our document as a single format we use the basic key-value pair:\nformat: html\nWe can easily change the format after rendering to create a new document which duplicates the format e.g., you could generate a slideshow and a static pdf/html as a backup (this is recommended if you might be presenting on a shared machine).\n\n\n\n\n\n\nPDF format\n\n\n\n\n\nQuarto can also render your documents into PDF, but you will need to first install LaTeX, if you do not already have it.\nIn r, you can install TinyTeX:\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()\nOr you can install full distribution like TeX Live (Linux), MacTeX (Mac), MikTeX (Windows).\nThen you can set your YAML header to format: pdf and click render.\n\n\n\n\n\nAdd a new heading in the .qmd document (either set the line to Header 2 in Visual Editor or type two # symbols) and call it “Section 3”. Add in more sections if you like!\nChange the format of the output from html to revealjs and render.\nExplore the revealjs (slideshow) format! 🤠\n\n\n\n\nThere are other useful features we can control through the YAML header. Some examples:\ntoc: true will autogenerate a table of contents (for multi-page websites or documents).\nbibliography: references.bib autogenerates a bibliography from a bib file.\ncsl: nature.csl sets the citation style.\nnumber-sections: true adds auto-numbering for each section.\n… and many more!\n\nSee HTML Basics at quarto.org for ways to format the HTML output in the YAML header.\n\nSee PDF Basics at quarto.org for ways to format the PDF output in the YAML header.\n\n\n\n\n\nWhat have we covered?\n\nInitiating a .qmd file.\nThe Visual and Source Editor windows.\nAn introduction to the qmd syntax: italics, bold, hyperlinks, # headings.\nThe YAML header controls global options, such as author/date/document type metadata, as well as a whole series of additional formatting tools.\nCreating a single output document (pdf, slideshow, standalone HTML) from the YAML header.",
    "crumbs": [
      "Part Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html#set-up-new-public-repo-and-open-an-r-project",
    "href": "episode_22_gettingStarted.html#set-up-new-public-repo-and-open-an-r-project",
    "title": "Getting Started",
    "section": "",
    "text": "Go to GitHub, under “Repositories”, click New, give your new repo a name and description.\nWe won’t need this beyond today, so you can call it something like my-test-repo if you like. Make sure the “public” box is checked (this should occur by default).\nClick on the green “Code” button, and copy the url for the repo.\nFrom RStudio, go File &gt; New Project &gt; Version Control &gt; Git. Paste in the repo URL, provide a project directory name, and select the location for the project. Click Create Project",
    "crumbs": [
      "Part Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html#first-quarto-doc",
    "href": "episode_22_gettingStarted.html#first-quarto-doc",
    "title": "Getting Started",
    "section": "",
    "text": "We can now create our first quarto (.qmd) file.\nUnder File &gt; New File, click Quarto Document. Alternatively, use the button that looks like a blank page with a white “+” inside a green circle, and select Quarto Document. This will bring up a panel for creating a new quarto document:\n\n\n\nNew Quarto doc panel\n\n\nOn the left hand side we can see three options: Document, Presentation, and Interactive, and for each of these we can see there are different outputs. We can change these outputs later, but for now, select Document and HTML (this is the recommended format for working in). Give this document a title, something like “Basic About Page”. Before we create the document, we can see a couple of other options: Engine (leave this as Knitr), Editor (we will keep the visual editor box ticked), and then we can either click Create or Create Empty Document. For now, click on Create\nThis creates and opens a new document for us to write in. We can note three things:\nFirst, at the very top of our document is something called the YAML header. The YAML header is information about the document, and is always contained within two sets of three dashes. The YAML header sets things like the document title, subtitle, author, and the output file, as well as a lot of extra information. We will cover the YAML header in more detail shortly.\nSecond, we can see this document is not blank - it comes pre-populated with some information about Quarto and how to run code (if we don’t want to see this information, we could use the ‘Create Empty Document’ button). These are often useful reminders when you are getting started, but once you are more familiar with Quarto you will delete these.\nThird, this already looks like a document - that’s because we are currently in the ‘Visual’ editor mode. We can click on the ‘Source’ button to enter editor mode and see the markdown syntax.\n\n\n\nVisual Editor mode is active\n\n\n\n\n\nSource Editor mode is active\n\n\nYou might also notice that within the YAML header there is a line selecting editor. While this says “visual” in both of the images above, we have manually over-ridden that with the inbuilt buttons in RStudio.\n\n\nNote three pieces of markdown syntax in the Source editor and how this translates into the Visual editor.\n\n\n\n\n\n\nSolution: three pieces of syntax in the source editor\n\n\n\n\n\n\n## - sets the Header level. Two # is “level 2”, three # is “level 3” (a smaller header). Note how these appear as headings in the Outline panel in RStudio.\n** - when a word is surrounded by the double * it will become bold. Using a single * around a word will be interpreted as italics.\n&lt;&gt; - are used to create a link. A word can also be embedded as a hyperlink by surrounding it with square brackets followed by the link itself in round brackets i.e., [this is the link text](https://this-is-the-URL.com)\n\n\nWe will cover more syntax shortly. Almost anything you would like to do can be achieved and is covered on the Quarto website.\n\n\n\n\n\n\nExtra for experts\n\n\n\n\n\nIf ## designates a header, and this workshop itself is written in Quarto, then why isn’t the line above coming up as a header?\nGood catch! We have done something extra here called ‘escaping’. When you need to specify a character like a # or an * that is used for special syntax, you can add a \\ (a backslash) first. This means that the next symbol will appear as-is in the document, rather than being translated as markdown.",
    "crumbs": [
      "Part Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html#visual-or-source-editor",
    "href": "episode_22_gettingStarted.html#visual-or-source-editor",
    "title": "Getting Started",
    "section": "",
    "text": "You may chose to almost exclusively use the Source Editor, which has the advantage of helping you learn the markdown language. This is useful if you want to work on your documents while you are away from RStudio (for example, Visual Studio Code (VSCode) is a popular tool, which we are using to write this workshop, and it doesn’t have the same visual editor).\nYou may prefer to use the Visual Editor, which has the advantage of speed and convenience - you can use basic buttons to add bold or italic text, embed links, insert tables etc.,.\nToday you can use one or the other, and we will try and demonstrate some of each.\n\n\nTo start: in the quarto document highlight everything outside of the yaml header (everything below the bottom three dashes) and delete it.\nMove to the Visual Editor, and use the toolbar buttons to:\n\nInsert a piece of Bold font.\nInsert a piece of italic font.\nSelect and highlight a piece of text (using the &lt;/&gt; button).\nAdd a heading above these bits of text you have just created (using the drop-down button called Normal to chose Header levels).\nAdd a numeric list with three different items on it.\nEmbed a link to the GitHub repo for this workshop: https://github.com/GenomicsAotearoa/reproducibility_with_git_and_quarto (use the chain-link button).\nFinally, insert an example table with column headers and some example text.\n\nOnce you have completed these tasks, switch back and forth between the Visual and Source Editor to see how these different effects are done with markdown.\n\n\n\nWe can also use superscript and subscript, by surrounding text with ^ or ~ respectively, and strikeout text using double ~~ on either side of the word.\n\n\n\nMarkdown Syntax\nVisual Output\n\n\n\n\nsuper^script^\nsuperscript\n\n\nsub~script~\nsubscript\n\n\n~~strikeout~~\nstrikeout\n\n\n\nParagraphs (and items in lists) need to be separated by an empty line. If there is no empty line between paragraphs, they will be interpreted as having a space between them.\nIf you are writing lists manually (i.e., not using the Visual editor option) you can either add unnumbered lists with an asterisk * or a hypen - or you can add numbered lists with any number followed by a fullstop at the start of the line.\n\n\n\n\n\n\nHints:\n\n\n\n\nNote that any number works (try writing a bullet point list with 1. 2. 2. 4. 5. to start each line!). Quarto will automatically sort the numbers, which means you can number lists and then easily add additional points anywhere along the list.\n\nSometimes an ‘Enter’ or ‘Return’ to make a new line is not enough. You may also need to add two spaces at the end of the top line, if the subsequent line is appearing on the preceding.\n\n\n\n\n\n\nSave your Quarto file (CTRL + S or CMD + S), give it a name if you have not already (e.g., getting-started.qmd) and save it into the directory you made earlier (mine is called my-test-repo).\nNow back in RStudio, click the ‘Render’ button, which will simultaneously open up a Preview. You can change the Preview settings by clicking the settings button next to the Render button. The Preview can either be viewed in a new window or in a panel in RStudio.\n\nAlternatively, you can preview and render a document on the command line (e.g., in terminal in RStudio, type):\nquarto preview getting-started.qmd\nThis should also open a Preview window automatically in your browser.\nAs you make changes on your .qmd file, every time you save the document the Preview will update.\nHit CTRL + C back in terminal to exit preview mode.\n\nNote: quarto preview is great for live viewing, but we always need to generate our final output with quarto render. More on rendering later in this workshop!",
    "crumbs": [
      "Part Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html#yaml-headers",
    "href": "episode_22_gettingStarted.html#yaml-headers",
    "title": "Getting Started",
    "section": "",
    "text": "At the top of each .qmd document we create, we will need a YAML header. YAML (Yet Another Markup Language or YAML Ain’t Markup Language) is placed at the very top of the document and is used to define the document metadata and output settings.\nFor a single document, like we have here, we will provide all of our information in this YAML header.\nFor a larger project, like a book or webpage we will provide a separate document with global information and the individual page YAML headers will be minimal.\n\nOne thing to note about YAML headers: they are fussy. Information within the YAML header must be stored between two lines each containing three dashes. When providing arguments you must provide both parts of the key-value pair, must use nesting where appropriate, and you must pay attention to indentation.\n\n\n\nArguments are provided in key-value pairs with a specific format.\n\n\ntitle: \"A grand yet succint paper title\"\nNote that technically you do not need to put the title itself in quotation marks, but you do need them if you want to include things like a colon (otherwise, the YAML header will attempt to interpret the colon).\n\n\n\nTo list an author on the document, we use the following key-value pair:\nauthor: Barbara McClintock\nAdd your own name as the author of the document, render or preview the document and confirm it has worked.\n\n\n\n\n\n\nAdding multiple authors\n\n\n\n\n\nThere are two ways for this to work, and more ways for it to fail.\nOne way to add authors is to include them on the same line, separated by commas:\nauthor: Barbara McClintock, Marie Curie\nNote that in this case, while we can read them as separate authors, it would be more accurate to call this a single author with a long and confusing name.\nThe correct way to include multiple authors is to list each author on a separate line under author, with each line starting with a dash:\nauthor:\n- Barbara McClintock\n- Marie Curie\nThis is an example of nesting, where we are providing multiple input sources under a single key. If we break the format (e.g., by having author: name on one line and -name on the next line) we will get an error message and the document will not render. This is a good demonstration of how YAML headers can be fussy.\nYou can also list multiple authors within [], with each author separated by commas:\nauthor: [Barbara McClintock, Marie Curie]\n\n\n\n\n\n\nThe basic format for date is:\ndate: 29-05-25\nThere are a lot of different formats we can use for date formats:\nMM/dd/yyyy\nMM-dd-yyyy\nMM/dd/yy\nMM-dd-yy\nyyyy-MM-dd\ndd MM yyyy\nMM dd, yyyy\nYYYY-MM-DDTHH:mm:ssZ\nThese options have a hierarchy. That means that Quarto will attempt to interpret the date in the order of formats above. In practice, this means that\ndate: 05/06/2025\nWill be interpreted as May 6th, 2025.\nFor the date:\ndate: 13/07/2025\nQuarto will first attempt to read it as month/date/year, but since that doesn’t work it will be intepreted as “The 7th day, 13 months from the start of 2025” - January 7th, 2026.\nFor this reason I strongly recommend using one of two options:\ndate: today The current local date.\ndate: last-modified The last date the input file was modified.\nClick save, and watch your Preview update.\n\n\n\nIt’s important to include this information in even our most basic documents. Clear authoring is required for fair attribution and for directing readers in terms of who to contact.\nUsing a last-modified date format helps the reader to understand the timeline of the file, such as what public data or software versions were available at the time of last render.\n\n\n\n\nWhen we want to output our document as a single format we use the basic key-value pair:\nformat: html\nWe can easily change the format after rendering to create a new document which duplicates the format e.g., you could generate a slideshow and a static pdf/html as a backup (this is recommended if you might be presenting on a shared machine).\n\n\n\n\n\n\nPDF format\n\n\n\n\n\nQuarto can also render your documents into PDF, but you will need to first install LaTeX, if you do not already have it.\nIn r, you can install TinyTeX:\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()\nOr you can install full distribution like TeX Live (Linux), MacTeX (Mac), MikTeX (Windows).\nThen you can set your YAML header to format: pdf and click render.\n\n\n\n\n\nAdd a new heading in the .qmd document (either set the line to Header 2 in Visual Editor or type two # symbols) and call it “Section 3”. Add in more sections if you like!\nChange the format of the output from html to revealjs and render.\nExplore the revealjs (slideshow) format! 🤠\n\n\n\n\nThere are other useful features we can control through the YAML header. Some examples:\ntoc: true will autogenerate a table of contents (for multi-page websites or documents).\nbibliography: references.bib autogenerates a bibliography from a bib file.\ncsl: nature.csl sets the citation style.\nnumber-sections: true adds auto-numbering for each section.\n… and many more!\n\nSee HTML Basics at quarto.org for ways to format the HTML output in the YAML header.\n\nSee PDF Basics at quarto.org for ways to format the PDF output in the YAML header.",
    "crumbs": [
      "Part Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html#summary",
    "href": "episode_22_gettingStarted.html#summary",
    "title": "Getting Started",
    "section": "",
    "text": "What have we covered?\n\nInitiating a .qmd file.\nThe Visual and Source Editor windows.\nAn introduction to the qmd syntax: italics, bold, hyperlinks, # headings.\nThe YAML header controls global options, such as author/date/document type metadata, as well as a whole series of additional formatting tools.\nCreating a single output document (pdf, slideshow, standalone HTML) from the YAML header.",
    "crumbs": [
      "Part Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_26_whereToNow.html",
    "href": "episode_26_whereToNow.html",
    "title": "Where to go from here?",
    "section": "",
    "text": "You have now seen the basics of using Quarto for creating documents. Quarto is a relatively new product from posit (the group behind RStudio) and there are regular, exciting updates on the project. While we have only given a brief introduction here, there are many excellent examples and resources available online to take you further with Quarto.\n\nThe key resource is the Quarto website. If you have completed everything in this workshop then you may want to skip to the Guide tab, or use the Get Started tab to introduce you to using Quarto in a different tool (e.g., VSCode instead of RStudio).\nThe posit::conf(2023) YouTube playlist has recordings from 14 talks (!!!) that mention Quarto, and in 2024 the conference organisers created a specific Quarto playlist. If nothing else, this should show you how important the community things Quarto is for bioinformatics. Key examples I can recommend include talks on automated reporting and scrollytelling.\nThe R4DS 2nd edition book was published using Quarto. Hadley Wickham’s github repo includes the raw .qmd files and is an excellent resource.",
    "crumbs": [
      "Part Two - Quarto",
      "Where to go from here?"
    ]
  },
  {
    "objectID": "episode_26_whereToNow.html#further-resources",
    "href": "episode_26_whereToNow.html#further-resources",
    "title": "Where to go from here?",
    "section": "",
    "text": "You have now seen the basics of using Quarto for creating documents. Quarto is a relatively new product from posit (the group behind RStudio) and there are regular, exciting updates on the project. While we have only given a brief introduction here, there are many excellent examples and resources available online to take you further with Quarto.\n\nThe key resource is the Quarto website. If you have completed everything in this workshop then you may want to skip to the Guide tab, or use the Get Started tab to introduce you to using Quarto in a different tool (e.g., VSCode instead of RStudio).\nThe posit::conf(2023) YouTube playlist has recordings from 14 talks (!!!) that mention Quarto, and in 2024 the conference organisers created a specific Quarto playlist. If nothing else, this should show you how important the community things Quarto is for bioinformatics. Key examples I can recommend include talks on automated reporting and scrollytelling.\nThe R4DS 2nd edition book was published using Quarto. Hadley Wickham’s github repo includes the raw .qmd files and is an excellent resource.",
    "crumbs": [
      "Part Two - Quarto",
      "Where to go from here?"
    ]
  },
  {
    "objectID": "episode_02_SettingUpGit.html",
    "href": "episode_02_SettingUpGit.html",
    "title": "Setting up Git",
    "section": "",
    "text": "Setting up Git\n\n\n\n\n\n\nKey points\n\n\n\n\nUse git config with the --global option to configure a user name, email address, editor, and other preferences once per machine.\n\n\n\n\nConfiguring for the first time\nWhen we use Git on a new computer for the first time, we need to configure a few things. Below are a few examples of configurations we will set as we get started with Git:\n\nour name and email address,\nwhat our preferred text editor is,\nand that we want to use these settings globally (i.e., for every project).\n\nOn a command line, Git commands are written as git verb options, where verb is what we actually want to do and options is additional optional information which may be needed for the verb. So here is how you could set up your computer:\ngit config --global user.name \"User Name\"\ngit config --global user.email \"your_email@example.com\"\nPlease use your own name and email address. This user name and email will be associated with your subsequent Git activity, which means that any changes pushed to GitHub after this lesson will include this information. The email address used should be the same as the one used when setting up your GitHub account. If you are concerned about privacy, please review GitHub’s instructions for keeping your email address private.\n\n\n\n\n\n\nOptional: configure your favourite text editor\n\n\n\n\n\n\n\n\n\n\n\n\nEditor\nConfiguration command\n\n\n\n\nAtom\ngit config --global core.editor \"atom --wait\"\n\n\nnano\ngit config --global core.editor \"nano -w\"\n\n\nBBEdit (Mac, with command line tools)\ngit config --global core.editor \"bbedit -w\"\n\n\nSublime Text (Mac)\ngit config --global core.editor \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w\"\n\n\nSublime Text (Win, 32-bit install)\ngit config --global core.editor \"'c:/program files (x86)/sublime text 3/sublime_text.exe' -w\"\n\n\nSublime Text (Win, 64-bit install)\ngit config --global core.editor \"'c:/program files/sublime text 3/sublime_text.exe' -w\"\n\n\nNotepad (Win)\ngit config --global core.editor \"c:/Windows/System32/notepad.exe\"\n\n\nNotepad++ (Win, 32-bit install)\ngit config --global core.editor \"'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n\n\nNotepad++ (Win, 64-bit install)\ngit config --global core.editor \"'c:/program files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n\n\nKate (Linux)\ngit config --global core.editor \"kate\"\n\n\nGedit (Linux)\ngit config --global core.editor \"gedit --wait --new-window\"\n\n\nScratch (Linux)\ngit config --global core.editor \"scratch-text-editor\"\n\n\nEmacs\ngit config --global core.editor \"emacs\"\n\n\nVim\ngit config --global core.editor \"vim\"\n\n\nVS Code\ngit config --global core.editor \"code --wait\"\n\n\n\nIt is possible to reconfigure the text editor for Git whenever you want to change it.\n\n\n\nGit (2.28+) allows configuration of the name of the branch created when you initialize any new repository. We will use that feature to set it to main so it matches the cloud service we will eventually use.\ngit config --global init.defaultBranch main\n\n\n\n\n\n\nBranches\n\n\n\n\n\nSource file changes are associated with a “branch.” In 2020, most Git code hosting services transitioned to using main as the default branch. As an example, any new repository that is opened in GitHub and GitLab default to main. However, Git has not yet made the same change. As a result, local repositories must be manually configured have the same main branch name as most cloud services. Otherwise by default, Git will create a branch called master when you create a new repository with git init (as explained in the next Episode). Read more on why master is now called main and the inclusive language decisions behind it here.\nBranches are covered later in this workshop.\n\n\n\nThe commands we just ran above only need to be run once: the flag --global tells Git to use the settings for every project, in your user account, on this computer\nWe can review these settings and change the configuration if needed.\n\n\n\n\n\n\nRe-configuring\n\n\n\n\n\nTo view your configuration, type into the terminal:\ngit config --list --global\nThis will give you an output like this:\nuser.name=yourusername\nuser.email=your_email@example.com\nuser.emaill=your_email@example.com\ninit.defaultbranch=main\ncore.editor=nano -w\nWe can make edits using:\ngit config --global --edit\nOr, if we need to use a proxy, we can tell Git about that:\ngit config --global http.proxy proxy-url\ngit config --global https.proxy proxy-url\nTo disable the proxy, use:\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\nTo get further help with configuring, use either -h or --help:\ngit config -h\ngit config --help\nMore generally, Git help can be found here:\ngit help",
    "crumbs": [
      "Part One - Git",
      "Setting up Git"
    ]
  },
  {
    "objectID": "episode_01_AutomatedVersionControl.html",
    "href": "episode_01_AutomatedVersionControl.html",
    "title": "Automated version control",
    "section": "",
    "text": "Automated version control\n\n\n\n\n\n\nKey points\n\n\n\n\nVersion control is like an unlimited ‘undo’.\nVersion control also allows many people to work in parallel.\n\n\n\nWe’ll start by exploring how version control can be used to keep track of what one person did and when. Even if you aren’t collaborating with other people, automated version control is much better than this situation:\n\nWe’ve all been in this situation before: it seems unnecessary to have multiple nearly-identical versions of the same document. Some word processors let us deal with this a little better, such as Microsoft Word’s Track Changes, Google Docs’ version history, or LibreOffice’s Recording and Displaying Changes.\nVersion control systems start with a base version of the document and then record changes you make each step of the way. You can think of it as a recording of your progress: you can rewind to start at the base document and play back each change you made, eventually arriving at your more recent version.\n\nOnce you think of changes as separate from the document itself, you can then think about “playing back” different sets of changes on the base document, ultimately resulting in different versions of that document. For example, two users can make independent sets of changes on the same document.\n\nUnless multiple users make changes to the same section of the document - a conflict - you can incorporate two sets of changes into the same base document.\n\nA version control system is a tool that keeps track of these changes for us, effectively creating different versions of our files. It allows us to decide which changes will be made to the next version (each record of these changes is called a commit), and keeps useful metadata about them, such as who made the change. The complete history of commits for a particular project and their metadata make up a repository. Repositories can be kept in sync across different computers, facilitating collaboration among different people.\n\n\n\n\n\n\nThe Long History of Version Control Systems\n\n\n\n\n\nAutomated version control systems are nothing new. Tools like RCS, CVS, or Subversion have been around since the early 1980s and are used by many large companies. However, many of these are now considered legacy systems (i.e., outdated) due to various limitations in their capabilities. More modern systems, such as Git and Mercurial, are distributed, meaning that they do not need a centralized server to host the repository. These modern systems also include powerful merging tools that make it possible for multiple authors to work on the same files concurrently.\nGit was created by Linus Torvalds in 2005 as an alternative to BitKeeper, one of the first distributed version control systems, to track changes in the Linux kernel. Torvalds provided several explanations of the name, of varying degrees of politeness, which are enumerated in the project’s README, including “Global Information Tracker” for when “you’re in a good mood”.\nFor those interested, The Carpentries has a Version Control with Mercurial lesson (2013-2018), which provides additional context and historical perspective.",
    "crumbs": [
      "Part One - Git",
      "Automated version control"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducibility with Git and Quarto",
    "section": "",
    "text": "What is this workshop about?\nGood research goes beyond running analyses, it’s about making your work reproducible, transparent, and accessible to your supervisor, colleagues, and the wider scientific community.\nThis two-day workshop will show you not only how to make your research more reproducible, but also how to more easily collaborate on projects with other researchers and how to generate polished reports to share with others.\nWith Git and GitHub, you’ll learn how to manage and host your own code, and how to download, adapt, and build on code that others share - whether that’s custom scripts, small programs, or entire projects.\nUsing Quarto, you’ll then learn how to turn your analysis into clear, self-contained documents, create polished HTML outputs with embedded results, and publish your work online as a website.\n\nHow are Git/GitHub and quarto linked?\nOne of the great things you can do with both of these tools together is create material in quarto documents, that can then be displayed as a webpage using GitHub. In fact, this workshop itself is written in quarto and displayed online using GitHub pages! Check out the github repo here.\n\n\nWhat this workshop does and does not cover:\nFor Part One - Git\nThis workshop does cover:\n\nSetting up git, creating a new repository and connecting your local repo to the GitHub Server.\nTracking, adding and committing files.\n\nBasic pushing, pulling and merging new branches.\nCollaboration and workflow tools (issues, projects).\n\nThis workshop does not cover:\n\nForking, merge conflicts and different kinds of merges.\n\nExtended file recovery, log details and commit history.\n\nUsing git rebase and git ignore.\n\nHow to connect Git/GitHub and RStudio (see The Carpentries lesson here or the Chapter from Happy Git with R on connecting these tools here.)\nFurther GitHub tools such as Releases, Actions, Pages\n\nFor Part Two - Quarto\nThis workshop does cover:\n\nBasic Quarto document creation, syntax and formatting.\nEmbedding an image, generating a table and coding in code blocks.\n\nBasic themes, styles and project dir structure.\n\nPublishing as a webpage using GitHub pages.\n\nThis workshop does not cover:\n\nUsing callouts.\n\nUsing HTML or CSS syntax in Quarto documents/projects.\n\nExtensive tool integration beyond RStudio (e.g., Jupyter, Visual Studio Code, Netlify, Shiny).\n\nBehind the scenes of Quarto (e.g., knitr execution, pandoc markdown and conversion).\n\n\n\n\nSetup\nFor this workshop you will need to have a number of different software installed on your local computer, as well as an account made with GitHub.\nSee Part One - Git: Setup on local machine for setup instructions. Quarto is a part of RStudio, therefore you will not need to setup anything extra for Part Two - Quarto.\n\n\nAttribution\nThe Git part of this workshop was adapted from and heavily inspired by content from The Carpentries lesson on Version Control with Git.\n\n\n\n\n\n\nCopyright information:\n\n\n\n\n\nAll Carpentries instructional material is made available under the Creative Commons Attribution license CC BY 4.0. The material in this workshop is not endorsed by the Carpentries and has been adapted by Genomics Aotearoa for our own teaching purposes.\nThe license information for The Carpentries lesson “Version Control with Git”, from which this workshop was adapted, can be found here.\nIn this workshop, the following episodes were adapted from The Carpentries lesson “Version Control with Git” in the manner stated below:\nRe-used material (i.e., almost word-for-word, including images, with minor wording or styling modifications):\n- Automated Version Control episode\n- Creating a repository episode\n- Tracking, adding and committing changes episode\n- Pushing local changes to GitHub episode\nMinimally-adapted material (i.e., inspired by stylistic choices and general workflow, but material is primarily developed by Genomics Aotearoa):\n- Branches, pulling and merging episode; continuing with The Carpentries recipe repo theme, but content is developed by Genomics Aotearoa.\n- Collaborating and organising your workflow episode; content is developed by Genomics Aotearoa.\n- Part One - Git overview; content is primarily developed by Genomics Aotearoa, set-up instructions for Git for Windows is copy-pasted from The Carpentries install instructions material.\n\n\n\nThe Quarto part of this workshop was written by Tyler McInnes while he worked for Genomics Aotearoa as a Bioinformatics Training Coordinator. Some small modifications have been made from his version to generalise and re-style the material.\n\n\n\n\nMade with ❤️ and Quarto",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "episode_25_researchPortfolio.html",
    "href": "episode_25_researchPortfolio.html",
    "title": "Building our own research portfolio",
    "section": "",
    "text": "Learn how to publish a website.\nGain experience with Quarto, explore options around format, theme, styles.css, etc., to create a polished website.\nPin a repo to showcase your capabilities.\nGain confidence in working publicly.\n\nAs an alternative to creating a research portfolio website, you may instead choose to focus on creating a website that documents one of your particular projects, or some other form of website. While we recommend the concept of a pinned github repo to highlight your abilities as a researcher and bioinformatician, how you do this is up to you.",
    "crumbs": [
      "Part Two - Quarto",
      "Building our own research portfolio"
    ]
  },
  {
    "objectID": "episode_25_researchPortfolio.html#aims",
    "href": "episode_25_researchPortfolio.html#aims",
    "title": "Building our own research portfolio",
    "section": "",
    "text": "Learn how to publish a website.\nGain experience with Quarto, explore options around format, theme, styles.css, etc., to create a polished website.\nPin a repo to showcase your capabilities.\nGain confidence in working publicly.\n\nAs an alternative to creating a research portfolio website, you may instead choose to focus on creating a website that documents one of your particular projects, or some other form of website. While we recommend the concept of a pinned github repo to highlight your abilities as a researcher and bioinformatician, how you do this is up to you.",
    "crumbs": [
      "Part Two - Quarto",
      "Building our own research portfolio"
    ]
  },
  {
    "objectID": "episode_25_researchPortfolio.html#why-a-portfolio-website",
    "href": "episode_25_researchPortfolio.html#why-a-portfolio-website",
    "title": "Building our own research portfolio",
    "section": "Why a portfolio website?",
    "text": "Why a portfolio website?\nIf you want to progress in bioinformatics, you should assume that people (future employers) will look at your github. Having a set of tidy repos that document your workflow is the minimum you should aim for. In addition to these tidy repos, we can build a single repo that directs and guides viewers through our github and highlights our key skills.\nAside from github repos it can be useful to create websites as a way to market either yourself and your work, or the work of your lab group. Quarto can make this easy. Jadey Ryan has a great website that really showcases what a Quarto website can look like.\nTo get a better understanding of why I am recommending this and what we are trying to do, we recommend this talk from posit::conf(2024) titled “Github - How to tell your professional story”. In this talk, Dr. Abigail Haddad outlines how Github can be used to demonstrate not just the raw coding skills you use frequently, but also the auxilliary skills that define how you work - your problem solving skills, your practices, and how you communicate.\nWe are going to take some of the advice from that talk, which says that all of your github should be used to actively demonstrate your skills and tell your story, and we are going to compress it down to a single github repo which will convey (or at least introduce) your story. We will Pin this repo so that it’s the first thing people see when they visit your github page, and publish it as a working website so that you also have a link you can drop into LinkedIn or Bluesky posts, incorporate into your email signatures, whenever you feel it’s appropriate to do some self-marketing.",
    "crumbs": [
      "Part Two - Quarto",
      "Building our own research portfolio"
    ]
  },
  {
    "objectID": "episode_25_researchPortfolio.html#initial-setup",
    "href": "episode_25_researchPortfolio.html#initial-setup",
    "title": "Building our own research portfolio",
    "section": "Initial setup",
    "text": "Initial setup\nUsing skills from yesterday and today’s workshops:\n\nInitiate a new, public github repo with a name like “Work Portfolio” or equivalent.\nIn RStudio, start a New Project and use the Version Control option to link it to the new repo.\nCreate three .qmd files. For each file, set the YAML header to include an appropriate title and add at least one header and a piece of sample text to each document:\n\nindex.qmd. Index.qmd will work as the landing page for the site, and could include something like the short blurb found at the top of a CV.\nportfolio.qmd. Portfolio will contain hyperlinks to your work - either to other github repos, publications, google scholar account, LinkedIn account etc., (it will be the definitive, exhaustive set of your work).\nresearch_focus.qmd. Research_focus.qmd will include a written statement about your focus as a researcher.\nCreate a _quarto.yml file using the template from the previous section. Include index.qmd first, then research_focus.qmd and then portfolio.qmd.\n\n\n\n\n\n\n\n\nMake the _quarto.yml file for me please:\n\n\n\n\n\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"My work portfolio\"\n  navbar:\n    left:\n      - text: \"My name\"\n        href: index.qmd\n      - text: \"My research focus\"\n        href: research_focus.qmd\n      - text: \"My portfolio\"\n        href: portfolio.qmd\n\nformat:\n  html:\n    theme: minty\n\n\n\nNote: these initial files are templates only, and will be populated later.\nSave all four files and click “Render” in RStudio. Alternatively, in terminal type quarto render then quarto preview. You will now have created a rudimentary structure for your work portfolio website.\n\n\n\n\n\n\nWhat should my website look like? Show me an example\n\n\n\n\n\nWe encourage you after the workshop to spend some time developing your research portfolio website, populated with your own real information.\nHere as an example, we have created a website as if written by the scientist Dr Barbara McClintock.\nYou can use this text to populate your own if you’d like to use an example for now:\n\n\n\n\n\n\n_quarto.yml\n\n\n\n\n\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"Barbara McClintock\"\n  navbar:\n    left:\n      - text: \"Home\"\n        href: index.qmd\n      - text: \"Research Focus\"\n        href: research_focus.qmd\n      - text: \"Portfolio\"\n        href: portfolio.qmd\n\nformat:\n  html:\n    theme: cosmo\n    toc: true\n\n\n\n\n\n\n\n\n\nindex.qmd\n\n\n\n\n\n---\ntitle: \"Barbara McClintock\"\nformat: html\n---\n\n\n# Welcome to My Research Portfolio\n\n![Barbara McClintock (1902-1992), Department of Genetics, Carnegie Institution at Cold Spring Harbor, New York, shown in her laboratory. [Photo: From the  Smithsonian Institution Archives, Accession 90-105, Science Service Records, Image No. SIA2008-5609](http://siarchives.si.edu/collections/siris_arc_306310)](images/barbaramcclintock.jpg){width=80%}\n\n\n\nHello, I’m **Barbara McClintock**, an American cytogeneticist fascinated by the dynamic nature of the genome.  \nMy work with **maize chromosomes** led to the discovery of genetic recombination, chromosome breakage, and eventually, **transposable elements** — genes that can move within the genome.\n\nI completed my PhD in Botany at **Cornell University** in 1927, and spent much of my career exploring how chromosomes behave and control genetic expression in maize.  \nIn 1983, I was awarded the **Nobel Prize in Physiology or Medicine** for the discovery of genetic transposition.\n\nThis site serves as a portfolio of my research, publications, and ongoing scientific interests.\n\n---\n\n&gt; “If you know you are on the right track, if you have this inner knowledge, then nobody can turn you off.”\n\n\n\n\nHint: The image in index.qmd will not display unless you download it from the given link and put it in a dir called images. The site will render regardless.\n\n\n\n\n\n\n\nresearch_focus.qmd\n\n\n\n\n\n---\ntitle: \"Research Focus\"\nformat: html\n---\n\n\nMy lifelong scientific interest lies in understanding how **chromosomes behave and change** — and how such behavior influences genetic expression and heredity.\n\n## Cytogenetics of Maize\nWorking with *Zea mays*, I developed techniques to visualize chromosomes under the microscope.  \nThese methods enabled me to:  \n- Demonstrate **crossing-over** during meiosis.  \n- Identify the roles of **telomeres** and **centromeres** in maintaining chromosome stability.  \n- Track structural rearrangements in chromosomes across generations.\n\n## Discovery of Transposable Elements\nIn the 1940s and 1950s, I discovered **“jumping genes”**, or **transposons** — mobile genetic elements that can change their position within the genome.  \nThis finding revealed that the genome is **not static**, but instead **dynamic and responsive** to its environment.\n\n## Later Research and Broader Impact\nMy later work extended into the **cytogenetics and ethnobotany of South American maize races**, integrating field studies with laboratory cytology.  \nThese findings helped connect genetic variability with the evolutionary adaptation of maize to local environments.\n\n---\n\n&gt; “A feeling for the organism” — understanding life by working with it patiently, respectfully, and without preconception — remains the heart of my approach to science.\n\n\n\n\n\n\n\n\n\nportfolio.qmd\n\n\n\n\n\n---\ntitle: \"Research Portfolio\"\nformat: html\n---\n\n\nBelow is a curated selection of my key scientific works and contributions to genetics.\n\n## 📚 Selected Publications\n- McClintock, B. (1939). *The Behavior in Successive Nuclear Divisions of a Chromosome Broken at Meiosis*. *PNAS*, **25** (8) 405-416. [doi.org/10.1073/pnas.25.8.40](https://doi.org/10.1073/pnas.25.8.40).  \n- McClintock, B. (1941). *The Stability of Broken Ends of Chromosomes in Zea Mays*. *Genetics*, **26** (2) 234-282. [doi.org/10.1093/genetics/26.2.234](https://doi.org/10.1093/genetics/26.2.234).  \n- McClintock, B. (1950). *The origin and behavior of mutable loci in maize*. *PNAS*, **36** (6) 344-355. [doi.org/10.1073/pnas.36.6.344](https://doi.org/10.1073/pnas.36.6.344).  \n\n\n## 🏆 Nobel Lecture\n- Nobel Lecture (1983): [The Significance of Responses of the Genome to Challenge](https://www.nobelprize.org/prizes/medicine/1983/mcclintock/lecture/)\n\n## 🔬 Data and Resources\n- [Cold Spring Harbor Laboratory — Barbara McClintock Collection](https://www.cshl.edu/personal-collections/barbara-mcclintock/)  \n\n## 🗞️ Media\n- [Nobel Prize Stories: Women who changed science](https://www.nobelprize.org/stories/women-who-changed-science/barbara-mcclintock/)\n\n## 🌐 Professional Links \n- [National Academy of Sciences Biography](https://www.nasonline.org/directory-entry/barbara-mcclintock-x3z8mp/)\n- [GitHub](https://github.com/chloevdb/work-portfolio-barbara-mcclintock)",
    "crumbs": [
      "Part Two - Quarto",
      "Building our own research portfolio"
    ]
  },
  {
    "objectID": "episode_25_researchPortfolio.html#refining-the-site",
    "href": "episode_25_researchPortfolio.html#refining-the-site",
    "title": "Building our own research portfolio",
    "section": "Refining the site",
    "text": "Refining the site\nHere we will look at a number of options through the _quarto.yml file to improve the look of the website.\n\nImproved navigation and layout\n\nSidebar navigation\nIn the last section we added a navbar along the top of the page for website navigation. An alternative to this is sidebar navigation:\n\nIn the _quarto.yml document, replace navbar: with sidebar:\nAdd a new line below sidebar, indent and add style: \"docked\".\nAdd a new line and (same indentation level as style:, because it is an argument under sidebar), remove the left:, and add contents:. This is then followed individual .qmd documents with text and href as before.\n\n\n\n\n\n\n\nHelp! What should my _quarto.yml look like now?\n\n\n\n\n\nYour _quarto.yml should now look like this:\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"My work portfolio\"\n  sidebar:\n    style: \"docked\"\n    contents:\n      - text: \"My name\"\n        href: index.qmd\n      - text: \"My portfolio\"\n        href: portfolio.qmd\n      - text: \"My research focus\"\n        href: research_focus.qmd\n\nformat:\n  html:\n    theme: minty\n\n\n\n\n\nSections\nWe can group pages under a header in sidebar navigation. Clicking on the header will open a drop-down menu. Each section can be given it’s own name, and can have any number of individual pages nested below it through the “contents:” key.\nSections are very useful for e.g., a website that focuses on discrete aspects (two day protocols, wetlab and drylab sections etc.,)\n\n\n\n\n\n\nExample sidebar and section .yml\n\n\n\n\n\n\n\n\nSidebar and sections example\n\n\n\n\n\n\n\n\nAdding personal details: github icons, footer, light and dark\n\nSite icons\nWe can add a range of icons to our navigation menu and provide links for these icons. This provides an easy and clear way for site visitors to view your other, more commonly used accounts. Commonly used icons include github/linkedIn/bluesky, with thousands of icons available for use.\nAdd the code below to a new line in the website section of the _quarto.yml file. Note that navbar should be at the same indentation level as sidebar. You can swap the href link (which is currently to the generic github site) to your own github.\n  navbar:\n    right:\n      - icon: github\n        href: https://github.com/\n        aria-label: GitHub\n\n\nFooter\nAdd a footer with:\n  page-footer:\n    center:\n      - text: \"Built with love and Quarto\"\n      - href: https://quarto.org\n\n\nThemes light and dark\nIn addition to selecting a single theme as we have done in the previous section of this workshop, we can enable both a light and dark mode using themes. The easiest way to do this is to choose the simple themes “flatly” and “darkly”, but you can select any themes you prefer.\nTo do this, under theme:, add two new lines with the key-value pairs light: flatly and dark: darkly. After rendering we can now switch between light and dark modes.\ntheme:\n  light: flatly\n  dark: darkly\n\n\n\nstyles.css\nIn addition to the pre-built format that themes can provide we can also customise our sites with a styles.css file. This a “Cascading Style Sheets” document, which can be used to override all of the Quarto defaults for HTML documents. The .css file is used to manipulate fonts, choose colours, layout, background for code cells, side and navbar aesthetics, table text alignment - almost every visual aspect can be changed with a styles.css file.\nThe styles.css file is written in css - it is not Quarto specific, and requires reasonably detailed knowledge. We recommend using templates sourced online or chatGPT equivalents for building a styles.css template which you can then work from.\nStyles.css is stored in the top level of the directory. In the _quarto.yml document under format, we can add a new line at the same indentation level as theme and added css: styles.css\nformat:\n  html:\n    css: styles.css\n\n\n\n\n\n\nExample styles.css\n\n\n\n\n\nHere we created one using ChatGPT, by asking it to create a styles.css file using the specified colour palette (these colours come from a Kākāpō palette by Geoffrey Thomson). Copy-paste this text into a text file and save it as styles.css:\n/* ===========================\n   Custom Portfolio Styles\n   =========================== */\n\n/* ----- Colour Palette ----- */\n:root {\n  --olive: #7D9D33;      /* Primary green accent */\n  --sage: #CED38C;       /* Light green background */\n  --gold: #DCC949;       /* Secondary accent */\n  --taupe: #BCA888;      /* Soft contrast */\n  --terracotta: #CD8862; /* Warm highlight */\n  --brown: #775B24;      /* Dark brown text / navbar */\n}\n\n/* ----- Base ----- */\nbody {\n  background-color: var(--sage);\n  color: var(--brown);\n  font-family: \"Helvetica Neue\", Arial, sans-serif;\n  line-height: 1.6;\n  margin: 0;\n  padding: 0;\n}\n\n/* ----- Headings ----- */\nh1, h2, h3, h4, h5, h6 {\n  color: var(--brown);\n  font-weight: 600;\n  margin-top: 1.2em;\n}\n\n/* ----- Links ----- */\na {\n  color: var(--olive);\n  text-decoration: none;\n  transition: color 0.2s ease-in-out;\n}\n\na:hover {\n  color: var(--terracotta);\n  text-decoration: underline;\n}\n\n/* ----- Sidebar ----- */\n.sidebar {\n  background-color: var(--sage);\n  color: var(--brown);\n  border-right: 2px solid var(--taupe);\n  padding-top: 1em;\n}\n\n.sidebar a {\n  display: block;\n  color: var(--brown);\n  padding: 0.5em 1em;\n  font-weight: 500;\n}\n\n.sidebar a:hover {\n  background-color: var(--gold);\n  color: var(--brown);\n  text-decoration: none;\n}\n\n.sidebar a.active {\n  border-left: 4px solid var(--terracotta);\n  background-color: rgba(205, 136, 98, 0.15);\n}\n\n/* ----- Navbar ----- */\n.navbar {\n  background-color: var(--brown);\n  color: var(--gold);\n  padding: 0.6em 1em;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 4px solid var(--terracotta);\n}\n\n.navbar a {\n  color: var(--gold);\n  margin-left: 1em;\n  font-weight: 500;\n}\n\n.navbar a:hover {\n  color: var(--sage);\n}\n\n/* ----- Footer ----- */\n.page-footer, .footer {\n  background-color: var(--brown);\n  color: var(--gold);\n  text-align: center;\n  padding: 1em;\n  font-size: 0.9em;\n  border-top: 4px solid var(--terracotta);\n}\n\n.page-footer a, .footer a {\n  color: var(--terracotta);\n  text-decoration: none;\n}\n\n.page-footer a:hover, .footer a:hover {\n  color: var(--gold);\n  text-decoration: underline;\n}\n\n/* ----- Buttons ----- */\nbutton, .btn, input[type=\"submit\"] {\n  background-color: var(--terracotta);\n  color: var(--sage);\n  border: none;\n  padding: 0.5em 1em;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: 600;\n  transition: background-color 0.2s ease-in-out;\n}\n\nbutton:hover, .btn:hover, input[type=\"submit\"]:hover {\n  background-color: var(--brown);\n  color: var(--gold);\n}\n\n/* ----- Content Boxes ----- */\n.content-box {\n  background-color: var(--taupe);\n  border: 1px solid var(--brown);\n  padding: 1em;\n  border-radius: 8px;\n  margin: 1em 0;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n}\n\n/* ----- Blockquotes ----- */\nblockquote {\n  border-left: 4px solid var(--terracotta);\n  background: var(--gold);\n  color: var(--brown);\n  padding: 1em;\n  margin: 1.5em 0;\n  font-style: italic;\n  border-radius: 4px;\n}\n\n/* ----- Tables ----- */\ntable {\n  border-collapse: collapse;\n  width: 100%;\n  background-color: var(--sage);\n}\n\nth {\n  background-color: var(--brown);\n  color: var(--gold);\n  padding: 0.6em;\n}\n\ntd {\n  border: 1px solid var(--taupe);\n  padding: 0.5em;\n  color: var(--brown);\n}\n\n/* ----- Code Blocks ----- */\npre, code {\n  background-color: var(--taupe);\n  color: var(--brown);\n  font-family: \"Courier New\", monospace;\n  border-radius: 4px;\n  padding: 0.3em 0.5em;\n}",
    "crumbs": [
      "Part Two - Quarto",
      "Building our own research portfolio"
    ]
  },
  {
    "objectID": "episode_25_researchPortfolio.html#publishing-the-site-using-github-pages",
    "href": "episode_25_researchPortfolio.html#publishing-the-site-using-github-pages",
    "title": "Building our own research portfolio",
    "section": "Publishing the site using GitHub Pages",
    "text": "Publishing the site using GitHub Pages\nTo publish a website - that is, to take it from the local-only html file to a hosted site that is accessible via url - there are a number of options. Today we will focus on publishing through GitHub Pages. Within GitHub Pages there are three options for publishing (render to docs and publish, using the quarto publish command, or using a Github Action). We will use the simplest option, render to docs and then instruct GitHub to publish from the docs directory.\n\n1. Setting up\n\nIn the _quarto.yml file, make sure that we have output-dir: docs under project. Quarto render will then output all files to the docs directory.\nWe need to add a specific file that tells GitHub pages not to do additional processing of our site (github has built in methods for publishing, which we do not want to use here). Under the Terminal tab in RStudio, run:\n\ntouch .nojekyll\nThe file is not rendered - starting with a . means that the file is not rendered and is instead treated as a high-level argument.\n\n\n2. Render, add, commit, push\nWhile still in the Terminal window of RStudio, run:\nquarto render\ngit add docs\ngit commit -m \"publish to docs/\"\ngit push\nOur new rendered docs should now be stored safely in our repo.\n\n\n3. Deploy from main/docs\nNavigate to the GitHub repo for the page you wish to deploy. Under Settings &gt; Pages, use the dropdown menus under the Branch header to select main branch, and then switch the directory from /(root) to /docs. When ready, click Save.\nThe page should refresh with a new note saying “Your Github pages site is currently being built…”.\n\n\n\nDeploying the github page\n\n\nRefresh the page to see the url for the new site and a button to Visit the site. Copy this url, return to the main page for the repo, and use the buttons on the github site to edit the About and/or Readme. Alternatively, back in RStudio open the README.md file and add the url there. Explore and share your now live portfolio webpage!\n\n\n4. Pin your repo\nOn the GitHub website you can pin up to six repos as visible on your main landing page, with the remaining repos being visible under the repos tab. Once your research portfolio website is underway we recommend pinning it, alongside your most completed and well-documented repos, so that they will be the first thing visitors will see.",
    "crumbs": [
      "Part Two - Quarto",
      "Building our own research portfolio"
    ]
  },
  {
    "objectID": "episode_25_researchPortfolio.html#summary",
    "href": "episode_25_researchPortfolio.html#summary",
    "title": "Building our own research portfolio",
    "section": "Summary",
    "text": "Summary\nYou can reasonably expect people to look at your github repos. Creating a repo to guide viewers through your portfolio of research is a a good way to influence what people will see.\nWith quarto we have a great level of control over the documents we create with arguments in the _quarto.yml file, through the use of themes, and a dedicated styles.css file.\nThere are multiple ways to freely publish your documents as websites. Github pages works well with quarto docs and the method shown here is simple and easy to follow.",
    "crumbs": [
      "Part Two - Quarto",
      "Building our own research portfolio"
    ]
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "Reproducibility with Git and Quarto",
    "section": "",
    "text": "Made with ❤️ and Quarto",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#what-is-this-workshop-about",
    "href": "index.html#what-is-this-workshop-about",
    "title": "Reproducibility with Git and Quarto",
    "section": "What is this workshop about?",
    "text": "What is this workshop about?\nGood research goes beyond running analyses, it’s about making your work reproducible, transparent, and accessible to your supervisor, colleagues, and the wider scientific community.\nThis two-day workshop will show you not only how to make your research more reproducible, but also how to more easily collaborate on projects with other researchers and how to generate polished reports to share with others.\nWith Git and GitHub, you’ll learn how to manage and host your own code, and how to download, adapt, and build on code that others share - whether that’s custom scripts, small programs, or entire projects.\nUsing Quarto, you’ll then learn how to turn your analysis into clear, self-contained documents, create polished HTML outputs with embedded results, and publish your work online as a website.\n\nHow are Git/GitHub and quarto linked?\nOne of the great things you can do with both of these tools together is create material in quarto documents, that can then be displayed as a webpage using GitHub. In fact, this workshop itself is written in quarto and displayed online using GitHub pages! Check out the github repo here.\n\n\nWhat this workshop does and does not cover:\nFor Part One - Git\nThis workshop does cover:\n\nSetting up git, creating a new repository and connecting your local repo to the GitHub Server.\nTracking, adding and committing files.\n\nBasic pushing, pulling and merging new branches.\nCollaboration and workflow tools (issues, projects).\n\nThis workshop does not cover:\n\nForking, merge conflicts and different kinds of merges.\n\nExtended file recovery, log details and commit history.\n\nUsing git rebase and git ignore.\n\nHow to connect Git/GitHub and RStudio (see The Carpentries lesson here or the Chapter from Happy Git with R on connecting these tools here.)\nFurther GitHub tools such as Releases, Actions, Pages\n\nFor Part Two - Quarto\nThis workshop does cover:\n\nBasic Quarto document creation, syntax and formatting.\nEmbedding an image, generating a table and coding in code blocks.\n\nBasic themes, styles and project dir structure.\n\nPublishing as a webpage using GitHub pages.\n\nThis workshop does not cover:\n\nUsing callouts.\n\nUsing HTML or CSS syntax in Quarto documents/projects.\n\nExtensive tool integration beyond RStudio (e.g., Jupyter, Visual Studio Code, Netlify, Shiny).\n\nBehind the scenes of Quarto (e.g., knitr execution, pandoc markdown and conversion).",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Reproducibility with Git and Quarto",
    "section": "Setup",
    "text": "Setup\nFor this workshop you will need to have a number of different software installed on your local computer, as well as an account made with GitHub.\nSee Part One - Git: Setup on local machine for setup instructions. Quarto is a part of RStudio, therefore you will not need to setup anything extra for Part Two - Quarto.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#attribution",
    "href": "index.html#attribution",
    "title": "Reproducibility with Git and Quarto",
    "section": "Attribution",
    "text": "Attribution\nThe Git part of this workshop was adapted from and heavily inspired by content from The Carpentries lesson on Version Control with Git.\n\n\n\n\n\n\nCopyright information:\n\n\n\n\n\nAll Carpentries instructional material is made available under the Creative Commons Attribution license CC BY 4.0. The material in this workshop is not endorsed by the Carpentries and has been adapted by Genomics Aotearoa for our own teaching purposes.\nThe license information for The Carpentries lesson “Version Control with Git”, from which this workshop was adapted, can be found here.\nIn this workshop, the following episodes were adapted from The Carpentries lesson “Version Control with Git” in the manner stated below:\nRe-used material (i.e., almost word-for-word, including images, with minor wording or styling modifications):\n- Automated Version Control episode\n- Creating a repository episode\n- Tracking, adding and committing changes episode\n- Pushing local changes to GitHub episode\nMinimally-adapted material (i.e., inspired by stylistic choices and general workflow, but material is primarily developed by Genomics Aotearoa):\n- Branches, pulling and merging episode; continuing with The Carpentries recipe repo theme, but content is developed by Genomics Aotearoa.\n- Collaborating and organising your workflow episode; content is developed by Genomics Aotearoa.\n- Part One - Git overview; content is primarily developed by Genomics Aotearoa, set-up instructions for Git for Windows is copy-pasted from The Carpentries install instructions material.\n\n\n\nThe Quarto part of this workshop was written by Tyler McInnes while he worked for Genomics Aotearoa as a Bioinformatics Training Coordinator. Some small modifications have been made from his version to generalise and re-style the material.\n\n\n\nMade with ❤️ and Quarto",
    "crumbs": [
      "Home"
    ]
  }
]