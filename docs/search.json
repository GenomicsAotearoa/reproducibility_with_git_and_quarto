[
  {
    "objectID": "episode_25_researchPortfolio.html",
    "href": "episode_25_researchPortfolio.html",
    "title": "Building our own research porfolio",
    "section": "",
    "text": "In this section we will all build and publish our own website with the aim of giving you:",
    "crumbs": [
      "Day Two - Quarto",
      "Building our own research porfolio"
    ]
  },
  {
    "objectID": "episode_25_researchPortfolio.html#why-a-portfolio-website",
    "href": "episode_25_researchPortfolio.html#why-a-portfolio-website",
    "title": "Building our own research porfolio",
    "section": "Why a portfolio website?",
    "text": "Why a portfolio website?\nIf you want to progress in bioinformatics, you should assume that people (future employers) will look at your github. Having a set of tidy repos that document your workflow is the minimum you should aim for. In addition to these tidy repos, we can build a single repo that directs and guides viewers through our github and highlights our key skills.\nAside from github repos it can be useful to create websites as a way to market either yourself and your work, or the work of your lab group. Quarto can make this easy. Jadey Ryan has a great website that really showcases what a Quarto website can look like.\nTo get a better understanding of why I am recommending this and what we are trying to do, I recommend this talk from posit::conf(2024) titled “Github - How to tell your professional story”. In this talk, Dr. Abigail Haddad outlines how Github can be used to demonstrate not just the raw coding skills you use frequently, but also the auxilliary skills that define how you work - your problem solving skills, your practices, and how you communicate.\nWe are going to take some of the advice from that talk, which says that all of your github should be used to actively demonstrate your skills and tell your story, and we are going to compress it down to a single github repo which will convey (or at least introduce) your story. We will Pin this repo so that it’s the first thing people see when they visit your github page, and publish it as a working website so that you also have a link you can drop into LinkedIn or Bluesky posts, incorporate into your email signatures, whenever you feel it’s appropriate to do some self-marketing.",
    "crumbs": [
      "Day Two - Quarto",
      "Building our own research porfolio"
    ]
  },
  {
    "objectID": "episode_25_researchPortfolio.html#initial-setup-5-10-minutes",
    "href": "episode_25_researchPortfolio.html#initial-setup-5-10-minutes",
    "title": "Building our own research porfolio",
    "section": "Initial setup (5-10 minutes)",
    "text": "Initial setup (5-10 minutes)\nUsing skills from yesterday and today’s workshops:\n\nInitiate a new, public github repo with a name like Work Portfolio or equivalent.\nIn RStudio, start a New Project and use the Version Control option to link it to the new repo.\nCreate three .qmd files. For each file, set the YAML header to include an appropriate title and add at least one header and a piece of sample text to each document:\n\nindex.qmd. Index.qmd will work as the landing page for the site, and could include something like the short blurb found at the top of a CV.\nportfolio.qmd. Portfolio will contain hyperlinks to your work - either to other github repos, publications, google scholar account, LinkedIn account etc., (it will be the definitive, exhaustive set of your work).\nresearch_focus.qmd. Research_focus.qmd will include a written statement about your focus as a researcher.\n\n\n* Note these initial files are templates only, and will be populated later.\n\nCreate a _quarto.yml file using the template from the previous section. Under contents, include index.qmd first, then portfolio.qmd and research_focus.qmd.",
    "crumbs": [
      "Day Two - Quarto",
      "Building our own research porfolio"
    ]
  },
  {
    "objectID": "episode_25_researchPortfolio.html#refining-the-site",
    "href": "episode_25_researchPortfolio.html#refining-the-site",
    "title": "Building our own research porfolio",
    "section": "Refining the site",
    "text": "Refining the site\nHere we will look at a number of options through the _quarto.yml file to improve the look of the website.\n\nImproved navigation and layout\n\nSidebar navigation\nIn the last section we added a navbar along the top of the page for website navigation. An alternative to this is sidebar navigation:\n\nIn the _quarto.yml document, replace ‘navbar:’ with ‘sidebar:’.\nAdd a new line below sidebar, indent and add style: “docked”.\nAdd a new line and (same indentation level as style, because it is an argument under sidebar) add contents:, then add individual .qmd documents with text and href as before.\n\n\n\nSections\nWe can group pages under a header in sidebar navigation. Clicking on the header will open a drop-down menu. Each section can be given it’s own name, and can have any number of individual pages nested below it through the “contents:” key.\nSections are very useful for e.g., a website that focuses on discrete aspects (two day protocols, wetlab and drylab sections etc.,)\n\n\n\n\n\n\nExample sidebar and section .yml\n\n\n\n\n\n\n\n\nSidebar and sections example\n\n\n\n\n\n\n\n\nAdding personal details: github icons, footer, light and dark\n\nSite icons\nWe can add a range of icons to our navigation menu and provide links for these icons. This provides an easy and clear way for site visitors to view your other, more commonly used accounts. Commonly used icons include github/linkedIn/bluesky, with thousands of icons available for use. Add the code below to a new line in the website section of the _quarto.yml file. Note that navbar should be at the same indentation level as sidebar. You can swap the href link (which is currently to the generic github site) to your own github.\nnavbar:\nright:\n\n  - icon: github\n\n    href: https://github.com/\n\n    aria-label: GitHub\n\n\nFooter\nAdd a footer with:\npage-footer:\ncenter:\n\n  - text: \"Built with love and Quarto\"\n\n  - href: https://quarto.org\n\n\nThemes light and dark\nIn addition to selecting a single theme as we have done in the previous section of this workshop, we can enable both a light and dark mode using themes. The easiest way to do this is to choose the simple themes “flatly” and “darkly”, but you can select any themes you prefer.\nTo do this, under theme, add two new lines with the key-value pairs “light: flatly” and “dark: darkly”. After rendering we can now switch between light and dark modes.\n\n\n\nstyles.css\nIn addition to the pre-built format that themes can provide we can also customise our sites with a styles.css file. The .css file is a “Cascading Style Sheets” document, which can be used to override all of the Quarto defaults for HTML documents. The .css file is used to manipulate fonts, choose colours, layout, background for code cells, side and navbar aesthetics, table text alignment - almost every visual aspect can be changed with a styles.css file.\nThe styles.css file is written in css - it is not Quarto specific, and requires reasonably detailed knowledge. I recommend using templates sourced online or chatGPT equivalents for building a styles.css template which you can then work from. Using chatGPT I selected colours (blue and gold for Otago), specified that I wanted those to be gentle (not harsh, lower contrast) and asked for a clean, clear look. I took the template and added it a new document call styles.css.\nStyles.css is stored in the top level of the directory. In the _quarto.yml document under format, I added a new line at the same indentation level as theme and added “css: styles.css”.",
    "crumbs": [
      "Day Two - Quarto",
      "Building our own research porfolio"
    ]
  },
  {
    "objectID": "episode_25_researchPortfolio.html#pinning-a-repo-and-publishing-the-site-using-github",
    "href": "episode_25_researchPortfolio.html#pinning-a-repo-and-publishing-the-site-using-github",
    "title": "Building our own research porfolio",
    "section": "Pinning a repo and publishing the site using github",
    "text": "Pinning a repo and publishing the site using github\nOn the github website you can pin up to six repos as visible on your main landing page, with the remaining repos being visible under the repos tab. Once your research portfolio website is underway I recommend pinning it, alongside your most completed and well-documented repos, so that they will be the first thing visitors will see.\nTo publish a website - that is, to take it from the local-only html file to a hosted site that is accessible via url - there are a number of options. Today we will focus on publishing through github pages. Within github pages there are three options for publishing (render to docs and publish, using the quarto publish command, or using a Github Action). We will use the simplest option, render to docs and then instruct github to publish from the docs directory.\n\nSetting up\nIn the _quarto.yml file, make sure that we have “output-dir: docs” under project. Quarto render will then output all files to the docs directory.\nWe need to add a specific file that tells github pages not to do additional processing of our site (github has built in methods for publishing, which we do not want to use here). Under the Terminal tab in RStudio, run “touch .nojekyll”. Just like how the underscore at the start of a _quarto.yml file means the file is not rendered, starting with a “.” means that the file is not rendered and is instead treated as a high-level argument.\n\n\nRender, add, commit, push\nWhile still in the Terminal window of RStudio, run:\nquarto render\ngit add docs\ngit commit -m \"publish to docs/\"\ngit push\nOur new rendered docs should now be stored safely in our repo.\n\n\nDeploy from main/docs\nNavigate to the github repo for the page you wish to deploy. Under Settings &gt; Pages, use the dropdown menus under the Branch header to select “Main” branch, and then switch the directory from “root” to “docs”. When ready, click “Save”.\nThe page should refresh with a new note saying “Your Github pages site is currently being built…”.\n\n\n\nDeploying the github page\n\n\nRefresh the page to see the url for the new site and a button to Visit the site. Copy this url, return to the main page for the repo, and use the buttons on the github site to edit the About and/or Readme. Alternatively, back in RStudio open the README.md file and add the url there.",
    "crumbs": [
      "Day Two - Quarto",
      "Building our own research porfolio"
    ]
  },
  {
    "objectID": "episode_25_researchPortfolio.html#summary",
    "href": "episode_25_researchPortfolio.html#summary",
    "title": "Building our own research porfolio",
    "section": "Summary",
    "text": "Summary\nYou can reasonably expect people to look at your github repos. Creating a repo to guide viewers through your portfolio of research is a a good way to influence what people will see.\nWith quarto we have a great level of control over the documents we create with arguments in the _quarto.yml file, through the use of themes, and a dedicated styles.css file.\nThere are multiple ways to freely publish your documents as websites. Github pages works well with quarto docs and the method shown here is simple and easy to follow.",
    "crumbs": [
      "Day Two - Quarto",
      "Building our own research porfolio"
    ]
  },
  {
    "objectID": "episode_26_whereToNow.html",
    "href": "episode_26_whereToNow.html",
    "title": "Where to go from here?",
    "section": "",
    "text": "You have now seen the basics of using Quarto for creating documents. Quarto is a relatively new product from posit (the group behind RStudio) and there are regular, exciting updates on the project. While we have only given a brief introduction here, there are many excellent examples and resources available online to take you further with Quarto.\nThe key resource is the Quarto webiste. If you have completed everything in this workshop then you may want to skip to the Guide tab, or use the Get Started tab to introduce you to using Quarto in a different tool (e.g., VSCode instead of RStudio).\nThe [posit::conf(2023)(https://www.youtube.com/playlist?list=PL9HYL-VRX0oRFZslRGHwHuwea7SvAATHp) YouTube playlist has recordings from 14 talks (!!!) that mention Quarto, and in 2024 the conference organisers created a specific Quarto playlist. If nothing else, this should show you how important the community things Quarto is for bioinformatics. Key examples I can recommend include talks on automated reporting and scrollytelling.\nThe R4DS 2nd edition book was published using Quarto. Hadley Wickham’s github repo includes the raw .qmd files and is an excellent resource.",
    "crumbs": [
      "Day Two - Quarto",
      "Where to go from here?"
    ]
  },
  {
    "objectID": "episode_24_projects.html",
    "href": "episode_24_projects.html",
    "title": "Projects: books and websites",
    "section": "",
    "text": "First, a challenge: What’s special about this page title? Specifically, what do I need to do when creating this .qmd file to make sure this renders?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThis page title contains a colon. Since colons are used to separate the key-value pair in the page YAML header, I need to make sure that the title is wrapped in quotation marks.",
    "crumbs": [
      "Day Two - Quarto",
      "Projects: books and websites"
    ]
  },
  {
    "objectID": "episode_24_projects.html#aims",
    "href": "episode_24_projects.html#aims",
    "title": "Projects: books and websites",
    "section": "Aims",
    "text": "Aims\nRecognise sensible directory structure and appreciate how consistent structure aids reproducibility and collaboration.\nUnderstand what a Quarto project is and when to use one.\nCreate and configure a basic Quarto project with _quarto.yml.\nLearn how _quarto.yml controls project-wide behavior (rendering, format, options).",
    "crumbs": [
      "Day Two - Quarto",
      "Projects: books and websites"
    ]
  },
  {
    "objectID": "episode_24_projects.html#project-directory-structure",
    "href": "episode_24_projects.html#project-directory-structure",
    "title": "Projects: books and websites",
    "section": "Project Directory Structure",
    "text": "Project Directory Structure\nProject structure and management are an important aspect of reproducible research. We want to build habits that support:\nTransparency: Other people (and of course - future you) must be able to understand your workflow.\nReproducibility: Define and clearly show what the expected inputs and outputs are.\nCollaboration: Having a consistent structure makes it easier for collaborators and teams to work together.\nModularity: Each component of a workflow should be something that can be isolated, tested, and reused in new contexts.\n\nKey practices for project layout\nSome key practices to keep in mind include:\n\nSeparate directories for Raw and Processed Data.\n\nRaw and Processed Data will probably be included in your .gitignore file so that it is not uploaded to github.\n\nScripts directories could be split by work stage (e.g., preprocessing/analysis/visualisation) or by type (e.g., R/Bash).\nOutput directories should contain subdirectories for each type of output (figures/tables).\nConfiguration files (_quarto.yml, styles.css, README) should sit in the main project directory.\nGlobal naming convention across projects.\n\n\nAn example directory structure\nmy-genomics-project/\n├── _quarto.yml\n├── index.qmd # Project overview or README\n├── about.qmd # Team/project info\n├── data/\n   ├── raw/\n\n   └── processed/\n├── scripts/\n   ├── qc/\n\n   ├── analysis/\n\n   └── visualizations/\n├── results/\n   ├── figures/\n\n   └── tables/\n├── images/ # Diagrams, logos\n└── docs/ # Optional: exported PDFs or other formats\n\n\nGroup discussion exercise\nHave you ever inherited a project that did (or did not) adhere to the above principles? How did this impact you?\nConsider your own current projects. If you (or a supervisor) were to leave work at 5pm and not return, what would the inheritors of this project think?\nHow much work would be involved in getting your current or previous projects from where they are now to a point where you would be happy to receive them?",
    "crumbs": [
      "Day Two - Quarto",
      "Projects: books and websites"
    ]
  },
  {
    "objectID": "episode_24_projects.html#quarto-projects",
    "href": "episode_24_projects.html#quarto-projects",
    "title": "Projects: books and websites",
    "section": "Quarto Projects",
    "text": "Quarto Projects\nSo far we have worked under the assumption that we are creating a single, brief document (e.g., a 10-page pdf, short html document etc.,). A project is a larger structure and will usually contain multiple individual documents all linked together. Examples of projects are books or multi-page websites.\nWe should also think about projects in terms of directory structure. We want to develop the habit of creating a clear and consistent directory structure for each of our projects, one that will be easy for other users to navigate and interpret.\n\nQuarto Projects and _quarto.yml\nSpecifically, a project is a directory that contains a high level file that provides information and structure to the other files: the _quarto.yml file. The _quarto.yml file is required to link individual pages together and provides options for navigation menus. Once a _quarto.yml file is in place in a directory, rendering any .qmd file in the directory will render all files in that directory - but only those that are linked through the _quarto.yml file will appear in the document.\nIf you have been following along you should have two .qmd files (Getting Started and Code Blocks). We will now build a new _quarto.yml file and use it to link the two existing pages into a single site. We will break this simple _quarto.yml into three sections: project information, website information, and format information.\n\n\n\n\n\n\nWhat if we don’t want to render a doc in the directory?\n\n\n\n\n\nSometimes a directory will contain files we don’t want to render - they may be large, or basic scratch notes, etc.,. To exclude files from the render process, rename them to start with an underscore (like with the _quarto.yml file).\n\n\n\n\nProject information\nThis file is essentially a YAML header for the whole project. Options here will be global for all files. We can see three discrete blocks of information in the above example:\n\nFirst we specify information about the project itself. This will include specifying the type of project, in this case website but alternatively a book/article/etc.,. Also nested under the project key we are going to specify the output directory for all rendering - we could render straight into the working directory, but we want to abide by good project structure and specify where our output files are going. We need to specify the output dir as “docs” to be able to publish the website later.\nSecond we have a block containing information about the output document. Because we are working on a website, we used the “website:” key and will use this to set the title and add a navigation bar. Under the navigation bar we link all the .qmd files we want to include with this website. When we are manually selecting .qmd files to include we must set both the title with the text argument and the filename with the href argument. There are a lot of additional options available to us in this block such as: top/side navigation bars of different styles, auto-generated contents, LinkedIn/Github icons etc., which we will cover later.\nThird we can control the look of the website with format options. We specify that we are working with an html-type output and can choose from a set of pre-built themes to customise the look of the document. We can also specify a css file, where we provide a styles.css file that further customises our website (e.g., brand colours, hyperlink visuals). We will look at creating a styles.css file later.\n\nRemember, the _quarto.yml file is essentially a YAML header for the whole document and is very fussy about indentation, spacing (between key-value pairs), and all format arguments.\nRender this document from one of the existing .qmd files. You cannot render from the _quarto.yml file itself.\n\n\n\n\n\n\nAn example _quarto.yml file\n\n\n\n\n\n\n\n\n_quarto.yml\n\n\n\n\n\nWe will look at the _quarto.yml options in more detail in the next section.\n\n\nExercise: _quarto.yml themes and options\nChange the theme in the _quarto.yml file to one of the 25 pre-built options (listed below). Render the document and view the outcome.\n\n\n\n\n\n\nPre-constructed themes\n\n\n\n\n\ndefault\ncerulean\ncosmo\ncyborg\ndarkly\nflatly\njournal\nlitera\nlumen\nlux\nmateria\nminty\nmorph\npulse\nquartz\nsandstone\nsimplex\nsketchy\nslate\nsolar\nspacelab\nsuperhero\nunited\nvapor\nyeti\nzephyr\n\n\n\nImmediately under the navbar line, add a new line (indented from navbar) and add “pinned: true”. What effect does this have?",
    "crumbs": [
      "Day Two - Quarto",
      "Projects: books and websites"
    ]
  },
  {
    "objectID": "episode_24_projects.html#summary",
    "href": "episode_24_projects.html#summary",
    "title": "Projects: books and websites",
    "section": "Summary",
    "text": "Summary\nSensible directory structures enhance reproducibility and make collaboration easier.\nQuarto projects are a directory containing multiple .qmd files linked by a _quarto.yml document.\nBasic _quarto.yml files control the structure of the output website/book, and can control all visual elements.",
    "crumbs": [
      "Day Two - Quarto",
      "Projects: books and websites"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html",
    "href": "episode_23_codeBlocks.html",
    "title": "Code in qmd files",
    "section": "",
    "text": "The aims of this section are to:\n\nLearn the fundamentals of code cells in Quarto documents.\nBecome familiar with inline coding.\nGenerate an html document with well-documented code and embedded output.\nReinforce and expand the syntax skills from the previous episode.\n\n\n\nBy the end of this section you should be able to:\n\nWrite and execute code chunks.\nUse inline code to create dynamic content.\nCreate an HTML report from your .qmd file.\nApply good commenting/documentation habits when working in Quarto.",
    "crumbs": [
      "Day Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html#aims",
    "href": "episode_23_codeBlocks.html#aims",
    "title": "Code in qmd files",
    "section": "",
    "text": "The aims of this section are to:\n\nLearn the fundamentals of code cells in Quarto documents.\nBecome familiar with inline coding.\nGenerate an html document with well-documented code and embedded output.\nReinforce and expand the syntax skills from the previous episode.\n\n\n\nBy the end of this section you should be able to:\n\nWrite and execute code chunks.\nUse inline code to create dynamic content.\nCreate an HTML report from your .qmd file.\nApply good commenting/documentation habits when working in Quarto.",
    "crumbs": [
      "Day Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html#code-cells",
    "href": "episode_23_codeBlocks.html#code-cells",
    "title": "Code in qmd files",
    "section": "Code cells",
    "text": "Code cells\nCode cells are the ‘working unit’ of code within Quarto. Each code cell will be evaluated and output will be embedded into the document immediately below the code cell. For this reason, it is worth thinking about the size and organisation of the code cell. A reasonable code cell might include loading all the libraries you will use in the analysis, or the generation of a single figure.\nWhen we want to embed code we do so with the use of the ` (“backtick”). Three backticks, followed by a curly bracket, and a symbol for the language our code will be in, signifies the start of a code block. We end the code block with three backticks. When we are within a code cell we can run any line of code, just the same as we would with a basic R markdown or R script document. Code cells are automatically executed as part of the rendering process.\n\n\n\nR Code cell\n\n\nNote: In RMarkdown we call these ‘code chunks’ and in Quarto they are referred to as code cells.\nWe can also insert a code cell using an in-built button in RStudio (the “+” and letter “C” in a green box):\n\n\n\nInsert New Code cell button\n\n\nThere are also keyboard shortcuts: shift+command+I for mac, or windows+alt+I for a Windows machine.\n\nExercise\nCreate a new quarto document (File &gt; New File &gt; Quarto Document) and give it the title “Code in Quarto”.\nHighlight and delete everything below the YAML header, then insert a new R code chunk (e.g., with the chunk option in Visual editor, the keyboard shortcut, or by manually adding backticks and curly braces in the Source editor).\nWithin the code chunk add the two lines:\nlibrary(palmerpenguins)\nhead(penguins)\nNote the palmerpenguins R package has a built-in object called penguins, which is what we are viewing with the head function.\nWithin the code chunk use the # symbol to add comments that explain what each line of code is doing.\nRender the document. You may be prompted to save the file first.\nBecause code cells are executed during rendering they need to work. For example, if you do not have the palmerpenguins package installed, this cell cannot successfully execute and the render process will fail. Using the # symbol within a code cell will cause that line of text to be ‘commented out’ (i.e., it will be interpreted as plain text, rather than code).\nIn the output document you should see both the code and the output of that code - in this case, the first six rows of the penguin object:\n\nlibrary(palmerpenguins)\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;",
    "crumbs": [
      "Day Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html#code-cell-options",
    "href": "episode_23_codeBlocks.html#code-cell-options",
    "title": "Code in qmd files",
    "section": "Code cell options",
    "text": "Code cell options\nWithin each code cell we can add arguments that modify how the code is interpreted or displayed in the rendered document. We will add this information at the start of the code cell with #| (called the hash pipe).\n\nEcho and Eval\nHere we will use the echo: false command to hide the R code itself from the final doc, while the output is still displayed:\n\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nNote that hash pipe arguments are not displayed - this makes code cleaner in the document, but it does make it difficult to demonstrate or teach. The drop-down note below has a figure to demonstrate the hash pipe.\n\n\n\n\n\n\nWhat is happening above?\n\n\n\n\n\nIn the qmd file used to build the website you are looking at right now, the code above reads:\n\n\n\nThe hash pipe\n\n\necho: false means the code itself (tail(penguins)) will not be displayed, but the code is still executed and the output embedded into the document.\n\n\n\nAlternatively, we can display the code but not the output with #| eval: false. When eval is set to false we see the code used but the code is not evaluated and no output is embedded into the final document. This is useful for when you want to demonstrate code but not run something that could take a long time or you do not want to over-write the original file.\n\n#| eval: false\ntail(penguins)\n\nNote although the the hashpipe and key-value statement is not normally visible, I’ve made it visible here by including the line twice in the .qmd document.\n\n\nCross-referencing\nQuarto allows easy cross-referencing. This can be done in two ways:\nWe can attach a label to a code block with #| label:, followed by a given label. We can then use @label to cross-reference. For example:\n\n#| label: fig-penguinBills\n\nlibrary(ggplot2)\nggplot(data = penguins,\n       mapping = aes(x = bill_depth_mm,\n                     y = bill_length_mm,\n                     colour = species,\n                     shape = species)) +\n         geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nFigure 1\n\n\n\n\n\nSee Figure 1 for a positive correlation between bill depth and bill length.\n\n\n\n\n\n\nWhat is happening above?\n\n\n\n\n\nIn the qmd file used to build the website you are looking at right now, the code block above contains two #| lines:\n#| label: fig-penguinBills\nBelow the code block the text reads:\n“See @fig-penguinBills for a positve correlation between bill depth and bill length.”\n\n\n\nFor cross referencing tables it is very similar to figures, but instead we use the tbl prefix\n\nlibrary(dplyr)\nlibrary(gt)\n\npenguins |&gt; \n  group_by(island) |&gt;\n  summarise(mean_body_mass_g = mean(body_mass_g, na.rm = TRUE)) |&gt;\n  gt() |&gt;\n  fmt_number(mean_body_mass_g) |&gt;\n  cols_label(island =\"Island\", \n              mean_body_mass_g = \"Mean Body Mass (g)\") |&gt;\n  cols_align(columns = island, align = \"left\")\n\n\n\nTable 1: Penguin Mean Body Weights\n\n\n\n\n\n\n\n\n\nIsland\nMean Body Mass (g)\n\n\n\n\nBiscoe\n4,716.02\n\n\nDream\n3,712.90\n\n\nTorgersen\n3,706.37\n\n\n\n\n\n\n\n\n\n\nAnd cross referencing is done in a similar matter by using the label, e.g. using \\@tbl-penguin-mass-summary gives us the reference Table 1.\n\n\nWarnings\nwarning: false will suppress warnings from code output. This can be very useful when you have a warning that is showing up repeatedly. I recommend printing the warning once and noting that it will be suppressed in all future cases.\nExercise: Add warning: false to the ggplot code cell above, and re-render the document to confirm warnings have disappeared.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n#| label: fig-penguinBillsNoWarning\n#| warning: false\nlibrary(ggplot2)\nggplot(data = penguins,\n       mapping = aes(x = bill_depth_mm,\n                     y = bill_length_mm,\n                     colour = species,\n                     shape = species)) +\n         geom_point()\n\n\n\n\n\n\n\nFigure 2\n\n\n\n\n\nNote that we cannot use the same label twice within a document, so we need to use a new label (penguinBillsNoWarning) or the render will fail.\n\n\n\n\n\nSet figure dimensions\nfig-width: x and fig-length: y can be used to manually set the dimension of embedded figures.",
    "crumbs": [
      "Day Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html#inline-code",
    "href": "episode_23_codeBlocks.html#inline-code",
    "title": "Code in qmd files",
    "section": "Inline code",
    "text": "Inline code\nInline code refers to code that is used within the document but is not stored separately in a code cell. The purpose of inline code is to embed the output directly into the document text.\nFor example, if we wanted to describe the mean bill length for the Adelie species of penguins in the penguins object, we could manually calculate the value and then add a written statement:\n\nround(mean(na.omit(penguins$bill_length_mm)),2)\n\n[1] 43.92\n\n# The mean bill length of penguins in the dataset is 43.92mm.\n\nTo streamline the above with inline code we need to do three things:\n\nWrite the text statement and open a set of backticks (`).\nSpecify the language (in this case, R).\nInclude the code to be evaluated.\n\nThis is demonstrated below, using quotation marks in place of backticks so that it is human readable:\nThe mean bill length of penguins in the dataset is “r round(mean(na.omit(penguins$bill_length_mm)),2)”mm.\nThe same line of code above but with backticks in place of quotation marks is rendered as:\nThe mean bill length of penguins in the dataset is 43.92mm.\n\nWhy use inline code?\nThe key reason for using inline code is reproducibility. If you need to re-run your analysis, or update an input file, your statements will automatically be updated to reflect the new data. This has the additional benefit of reducing human error: avoids copy-paste errors (or copy and writing errors) between the calculated values and the value stated in text and ensures that all instances of this value are identical (e.g., if this value is referred to repeatedly).\n\nGood practice for inline code\n\nRemember that while the final document will have the evaluated output, the document you (or a collaborator) are working on will have the code embedded. Therefore, keep inline code simple and short. If the code required is lengthy, consider moving this to a code cell and storing the output as an object. Then use the object as part of the inline code.\nDo not use inline code in Quarto headings (it will not be evaluated).\nMake use of the round() function to control the number of decimal places.\nRemember to include na.omit() if appropriate. Data may not currently include NAs, but if you think the data could be updated in future this may cause issues.\nAdd comments within code cells or as appropriate so that readers know where the values are coming from.",
    "crumbs": [
      "Day Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html#summary",
    "href": "episode_23_codeBlocks.html#summary",
    "title": "Code in qmd files",
    "section": "Summary",
    "text": "Summary\nIn this section we have:\n\nEmbedded code cells and modified their behaviour with the hash-pipe.\nEmbedded output, including figures, and made this output cross-referencable with the use of the label option.\nUsed inline code to improve reproducibility in our document.",
    "crumbs": [
      "Day Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "episode_23_codeBlocks.html#exit-exercises",
    "href": "episode_23_codeBlocks.html#exit-exercises",
    "title": "Code in qmd files",
    "section": "Exit exercises",
    "text": "Exit exercises\n\nWhat are the three methods for inserting a new code cell?\nWhat symbols do we add to set the code cell options?\nIf a code cell has echo: false and eval: true, what will happen when the document is rendered?\nList one other code cell option we have used today.\nGive two reasons you might use to convince a co-worker to use inline code.",
    "crumbs": [
      "Day Two - Quarto",
      "Code in qmd files"
    ]
  },
  {
    "objectID": "quarto_overview.html",
    "href": "quarto_overview.html",
    "title": "Quarto Overview",
    "section": "",
    "text": "What is Quarto?\nWhat is the purpose of Quarto (and it’s equivalent systems)?\nBasic syntax (generate a pdf)\nUpgrading to a website\nPreview and Render, git and Publishing",
    "crumbs": [
      "Day Two - Quarto"
    ]
  },
  {
    "objectID": "quarto_overview.html#practically-what-will-we-do-today",
    "href": "quarto_overview.html#practically-what-will-we-do-today",
    "title": "Quarto Overview",
    "section": "Practically, what will we do today?",
    "text": "Practically, what will we do today?\nEveryone will generate a pdf and a published website.\nWe will demonstrate how to incorporate code and text notes into a document.",
    "crumbs": [
      "Day Two - Quarto"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html",
    "href": "episode_22_gettingStarted.html",
    "title": "Getting Started",
    "section": "",
    "text": "In this workshop we will need to work publicly (which is scary). We will create a public github repo to work from, and in the first stages of this workshop we will generate a local file (for ease, we will create a basic .html file, but the concepts will be the same as for creating a word doc or pdf). We will then update this file to become a webpage which to function as an ‘about me’ page or to showcase your work. I recommend pinning this repo (which we will demonstrate) so that when someone visits your github, they can view useful information about you.",
    "crumbs": [
      "Day Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html#set-up-new-public-repo-and-open-an-r-project",
    "href": "episode_22_gettingStarted.html#set-up-new-public-repo-and-open-an-r-project",
    "title": "Getting Started",
    "section": "Set up new public repo and open an R project",
    "text": "Set up new public repo and open an R project\nGo to github, under “Repositories”, click New, give your new repo a name and description, and make sure the “public” box is checked (this should occur by default).\nClick on the green “Code” button, and copy the url for the repo.\nFrom RStudio, go File &gt; New Project &gt; Version Control &gt; Git. Paste in the repo URL, provide a project directory name, and select the location for the project. Initialise the project when ready.",
    "crumbs": [
      "Day Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html#first-quarto-doc",
    "href": "episode_22_gettingStarted.html#first-quarto-doc",
    "title": "Getting Started",
    "section": "First quarto doc",
    "text": "First quarto doc\nWe can now create our first quarto (.qmd) file. Under File &gt; New File, click Quarto Document. Alternatively, use the button that looks like a blank page with a white “+” inside a green circle, and select Quarto Document. This will bring up a panel for creating a new quarto document:\n\n\n\nNew Quarto doc panel\n\n\nOn the left hand side we can see three options: Document, Presentation, and Interactive, and for each of these we can see there are different outputs. We can change these outputs later, but for now, select Document and HTML (this is the recommended format for working in). Give this document a title, something like “Basic About Page”. Before we create the document, we can see a couple of other options: Engine (leave this as Knitr), Editor (we will keep the visual editor box ticked), and then we can either click “Create” or “Create Empty Document”. For now, click on Create.\nThis creates and opens a new document for us to write in. We can note three things:\nFirst, at the very top of our document is something called the YAML header. The YAML header is information about the document, and is always contained within two sets of three dashes. The YAML header sets things like the document title, subtitle, author, and the output file, as well as a lot of extra information. We will cover the YAML header in more detail shortly.\nSecond, we can see this document is not blank - it comes pre-populated with some information about Quarto and how to run code (if we don’t want to see this information, we could use the Create Empty Document button). These are often useful reminders when you are getting started, but once you are more familiar with Quarto you will delete these.\nThird, this already looks like a document - that’s because we are currently in the “Visual” editor mode. We can click on the “Source” button to enter editor mode and see the markdown syntax.\n \nYou might also notice that within the YAML header there is a line selecting editor. While this says “visual” in both of the images above, we have manually over-ridden that with the inbuilt buttons in RStudio.\n\nExercise: Note three pieces of markdown syntax in the Source editor and how this translates into the Visual editor.\n\n\n\n\n\n\nThree peices of syntax in the source editor\n\n\n\n\n\n\n“##” - sets the Header level. Two # is “level 2”, three # is “level 3” (a smaller header). Note how these appear as headings in the Outline panel in RStudio.\n“**” - when a word is surrounded by the double * it will become bold. Using a single * around a word will be interpreted as italics.\n“&lt;&gt;” - are used to create a link. A word can also be embedded as a hyperlink by surrounding it with square brackets followed by the link itself in round brackets.\n\nWe will cover more syntax shortly. Almost anything you would like to do can be achieved and is covered on the Quarto website.\nIf ## designates a header, why isn’t this line coming up as a header? When you need to specify something like a # or an *, add \\ (a backslash) first. This is known as ‘escaping’ and means that the next symbol will appear as-is in the document, rather than being translated as markdown.",
    "crumbs": [
      "Day Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html#rendering-a-document",
    "href": "episode_22_gettingStarted.html#rendering-a-document",
    "title": "Getting Started",
    "section": "Rendering a document",
    "text": "Rendering a document\nThe RStudio visual editor has a built in button for rendering a document, which will simultaneously open up a Preview. The Preview can either be viewed in a new window or in a panel in RStudio.",
    "crumbs": [
      "Day Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html#visual-or-source-editor",
    "href": "episode_22_gettingStarted.html#visual-or-source-editor",
    "title": "Getting Started",
    "section": "Visual or Source Editor",
    "text": "Visual or Source Editor\nWhen I started writing this workshop I was almost exclusively using the Source Editor. During the process of writing this workshop I became more familiar with some of the features of Visual and started using that as a preference. You can use one or the other, and we will try and demonstrate some of each.\nThe advantage to working in the Source Editor is that you are learning the markdown language. This is useful if you want to work on your documents while you are away from RStudio (for example, I often work in VisualStudioCode (VSCode), which doesn’t have the same visual editor).\nThe advantage to working in the Visual Editor is speed and convenience - you can use basic buttons to add bold or italic text, embed links, insert tables etc.,.\n\nExercise: Visual and Source (five minutes)\nTo start: in the quarto document highlight everything outside of the yaml header (everything below the bottom three dashes) and delete it.\nMove to the Visual Editor, and use the toolbar buttons to:\n\nInsert a piece of Bold font.\nInsert a piece of italic font.\nSelect and highlight a piece of text (using the &lt;/&gt; button).\nAdd a heading above these bits of text you have just created (using the drop-down button called Normal).\nAdd a numeric list with three different items on it.\nEmbed a link to yesterdays’ Github workshop: https://swcarpentry.github.io/git-novice/instructor/index.html (use the chain-link button).\nFinally, insert an example table with column headers and some example text.\n\nOnce you have completed these tasks, switch back and forth between the Visual and Source Editor to see how these different effects are done with markdown.\nAs you can see, the Visual editor makes it much easier to work in the Quarto markdown language.\n\n\nOther syntax options and notes:\nWe can also use superscript and subscript, by surrounding text with ^ or ~ respectively, and strikeout strikethrough text using double ~~ on either side of the word.\nParagraphs (and items in lists) need to be separated by an empty line. If there is no empty line between paragraphs, they will be interpreted as having a space between them.\nIf you are writing lists manually (i.e., not using the Visual editor option) you can either add unnumbered lists with an *, or you can add numbered lists with any number followed by a fullstop at the start of the line. Note that any number works (try writing a bullet point list with 1. 2. 2. 4. 5. to start each line, remembering to separate lines with an empty line). Quarto will automatically sort the numbers, which means you can number lists and then easily add additional points anywhere along the list.",
    "crumbs": [
      "Day Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html#yaml-headers",
    "href": "episode_22_gettingStarted.html#yaml-headers",
    "title": "Getting Started",
    "section": "YAML headers",
    "text": "YAML headers\nAt the top of each .qmd document we create, we will need a YAML header. YAML (Yet Another Markup Language or YAML Ain’t Markup Language) is placed at the very top of the document and is used to define the document metadata and output settings. For a single document, like we have here, we will provide all of our information in this YAML header. For a larger project like a book or webpage we will provide a separate document with global information and the individual page YAML headers will be minimal.\nOne thing to note about YAML headers: they are fussy. Information within the YAML header must be stored between two lines each containing three dashes. When providing arguments you must provide both parts of the key-value pair, must use nesting where appropriate, and you must pay attention to indentation.\n\nDocument metadata\nArguments are provided in key-value pairs with a specific format.\n\nTitle\ntitle: \"A grand yet succint paper title\"\nNote that technically you do not need to put the title itself in quotation marks, but you need them if you want to include things a colon (otherwise, the YAML header will attempt to interpret the colon).\n\n\nAuthor\nExercise: Adding one or more authors\nTo list an author on the document, we use the following key-value pair:\nauthor: T.McInnes\nAdd your own name as the author of the document, render the document and confirm it has worked.\nNow add the initials of the people sitting next to you (or the intials of the Instructors, if online) as authors. Note - this might not work how you think it will. You may find the authors don’t appear how you expected, or the document may fail to render. This is a good demonstration of how YAML headers can be fussy.\n\n\n\n\n\n\nAdding multiple authors\n\n\n\n\n\nThere are two ways for this to work, and more ways for it to fail.\nOne way to add authors is to include them on the same line, separated by commas:\nauthor: T.McInnes, McInnes.T\nNote that in this case, while we can read them as separate authors, it would be more accurate to call this a single author with a long and confusing name.\nThe correct way to include multiple authors is to list each author on a separate line under author, with each line starting with a dash:\nauthor:\n- T.McInnes\n- McInnes.T\nThis is an example of nesting, where we are providing multiple input sources under a single key. If we break the format (e.g., by having author: name on one line and -name on the next line) we will get an error message and the document will not render.\nYou can also list multiple authors within [], with each author separated by commas.\n\n\n\n\n\nDate\nThe basic format for date is:\ndate: 29-05-25\nThere are a lot of different formats we can use for date formats:\nMM/dd/yyyy\nMM-dd-yyyy\nMM/dd/yy\nMM-dd-yy\nyyyy-MM-dd\ndd MM yyyy\nMM dd, yyyy\nYYYY-MM-DDTHH:mm:ssZ\nThese options have a hierarchy. That means that Quarto will attempt to interpret the date in the order of formats above. In practice, this means that\ndate: 05/06/2025\nWill be interpreted as May 6th, 2025.\nFor the date:\ndate: 13/07/2025\nQuarto will first attempt to read it as month/date/year, but since that doesn’t work it will be intepreted as “The 7th day, 13 months from the start of 2025” - January 7th, 2026.\nFor this reason I strongly recommend using one of two options:\ndate: today The current local date.\ndate: last-modified The last date the input file was modified.\n\n\nWhat impact does this have on reproducibility?\nIt’s important to include this information in even our most basic documents. Clear authoring is required for fair attribution and for directing readers in terms of who to contact.\nUsing a last-modified date format helps the reader to understand the timeline of the file, such as what public data or software versions were available at the time of last render.\n\n\n\nOutput format\nWhen we want to output our document as a single format we use the basic key-value pair:\nformat: html\nWe can easily change the format after rendering to create a new document which duplicates the format e.g., you could generate a slideshow and a static pdf/html as a backup (this is recommended if you might be presenting on a shared machine).\n\nExercise: Exploring revealjs\nAdd a new heading in the .qmd document (either set the line to Header 2 in Visual Editor or type two # symbols) and call it “Section 3”.\nChange the format of the output from html to “revealjs” and render.\nExplore the revealjs (slideshow) format.\n\n\n\nGlobal code options\nCode options included in the YAML header are global - they will be applied to all code cells in this document. As we will cover below, individual code cells (chunks or blocks of code) can be controlled separately. Some useful global options we might want to set in the YAML header are:\ncode-fold: true\ncode-tools: true\nWhen code-fold is set to true, all code blocks will be automatically collapsed. This is useful when you want code to be available but would otherwise distract from the flow of the document e.g., when teaching/training, presenting at lab meetings. Code-tools provides a simple button at the top of the html that can then be used to toggle all code to open/closed (an easy ‘reset’ of all code blocks).\n\n\nUseful features\nThere are other useful features we can control through the YAML header. Some examples:\ntoc: true will autogenerate a table of contents (for multi-page websites or documents).\nbibliography: references.bib autogenerates a bibliography from a bib file.\ncsl: nature.csl sets the citation style.\nnumber-sections: true adds auto-numbering for each section.",
    "crumbs": [
      "Day Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_22_gettingStarted.html#summary",
    "href": "episode_22_gettingStarted.html#summary",
    "title": "Getting Started",
    "section": "Summary",
    "text": "Summary\nWhat have we covered?\n\nInitiating a .qmd file.\nThe Visual and Source Editor windows.\nAn introduction to the qmd syntax: italics, bold, hyperlinks, headings.\nThe YAML header controls global options, such as author/date/document type metadata as well as a whole series of additional tools. If you are creating a single document (pdf, slideshow, standalone HTML) all of this information will be within the header at the top of the document. If you are creating a complex project (like the webpage you are reading now) most of that information will be stored in a separate document which we will cover later. As you will see below, you can over-ride the global options for certain blocks of code.",
    "crumbs": [
      "Day Two - Quarto",
      "Getting Started"
    ]
  },
  {
    "objectID": "episode_21_introduction.html",
    "href": "episode_21_introduction.html",
    "title": "Introduction to Quarto",
    "section": "",
    "text": "We propose using Quarto based on the assertion that that code alone is not enough to ensure reproducibility. A complete copy of all code, and an example dataset, can be used to accurately reproduce a result - however, it does not convey the logic, the reasoning, the intent of the work*.\nQuarto is a system for producing documents which contain all code, comments from the author, and embedded outputs. The system is easy to use and wraps around the code you will already be writing, with the aim of making this documentation part of your every day workflow.\n*An often-told story is about a cook who used to cut the ends off the meatloaf, not knowing why other than it’s how their mother used to do it. The story goes first to the mother, who explains that she learned to cut the ends off the loaf from her mother, and then we learn from the grandmother that she used to use one tray for baking the meatloaf, and a shorter tray for serving - the ends were cut off to fit the serving tray.\n\n\n\nall code involved in viewing, manipulating, and storing data.\na snapshot of the input format, so that we know what our data should look like going in.\nthe outcome (tables, figures, saved files), so that we can independently re-run the analysis and ensure we get the same result, and demonstrate the format of the outcome so that we can use the method on our own data.\nthe mindset and logic used at each step, so that we can understand why certain methods and thresholds were chosen and determine for ourselves whether to apply or modify those steps for our own analysis.",
    "crumbs": [
      "Day Two - Quarto",
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "episode_21_introduction.html#what-are-we-trying-to-achieve",
    "href": "episode_21_introduction.html#what-are-we-trying-to-achieve",
    "title": "Introduction to Quarto",
    "section": "",
    "text": "We propose using Quarto based on the assertion that that code alone is not enough to ensure reproducibility. A complete copy of all code, and an example dataset, can be used to accurately reproduce a result - however, it does not convey the logic, the reasoning, the intent of the work*.\nQuarto is a system for producing documents which contain all code, comments from the author, and embedded outputs. The system is easy to use and wraps around the code you will already be writing, with the aim of making this documentation part of your every day workflow.\n*An often-told story is about a cook who used to cut the ends off the meatloaf, not knowing why other than it’s how their mother used to do it. The story goes first to the mother, who explains that she learned to cut the ends off the loaf from her mother, and then we learn from the grandmother that she used to use one tray for baking the meatloaf, and a shorter tray for serving - the ends were cut off to fit the serving tray.\n\n\n\nall code involved in viewing, manipulating, and storing data.\na snapshot of the input format, so that we know what our data should look like going in.\nthe outcome (tables, figures, saved files), so that we can independently re-run the analysis and ensure we get the same result, and demonstrate the format of the outcome so that we can use the method on our own data.\nthe mindset and logic used at each step, so that we can understand why certain methods and thresholds were chosen and determine for ourselves whether to apply or modify those steps for our own analysis.",
    "crumbs": [
      "Day Two - Quarto",
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "episode_21_introduction.html#what-is-quarto",
    "href": "episode_21_introduction.html#what-is-quarto",
    "title": "Introduction to Quarto",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nQuarto is a system that facilitates the easy creation of documents that wrap and store our code, the outputs, and notes. With a small bit of extra effort when writing our code, Quarto can generate pdfs, word docs, slideshow presentations, and websites. This website is built using Quarto. It is designed for scientific publishing, and works with multiple languages (R, Julia, Python) - the outcome from these code blocks can be easily embedded (e.g., if code produces a figure, that figure will appear in the document). Quarto itself uses “markdown language”, and will be familiar for anyone already using RMarkdown. Markdown is meant to be readable even before it’s published, which means our day-to-day working documents are not a chore to work with.\nSimply, with Quarto, you will add small pieces of code to define headers, insert code blocks, embed links and figures. This code is then rendered into a document for distribution or storage.\nThis website was built with Quarto. As an example, it has clear structure, embedded images and code, and a format that was very easy to create and replicate across documents. The same content could be easily redirected into a pdf or even a slideshow with very little effort.\n\nWhat is the purpose of Quarto?\nQuarto exists to make publishing scientific documents easy, and to facilitate the creation of flexible, high quality outputs.\nHaving the ability to create one or more documents with all code, comments, and output together is highly beneficial. Compare this to having individual R scripts, figures saved to a folder, and a word document with notes.\n\n\nWhat can we do with Quarto?\nLots! It’s worth noting that we write our document using Quarto’s markdown language, and this is then translated into the final document, and it’s very easy to switch the output types (e.g., the same working document can be used to produce a word doc, a pdf, and a slideshow). Beyond simple documents, Quarto is an easy way to create websites, blogs, dashboards, and books (even a PhD thesis).\nQuarto places a premium on quality - the online community of people using quarto are creating stylistic, clear, well-designed documents that emphasise the importance of science communication.\nAs an example this book was created in Quarto, and by book I mean both the printed version and the website.\n\n\nHow does it work?\n\n\n\nThe Quarto render process\n\n\nThis visual comes directly from a Quarto workshop presented at posit::conf(2023) by Andrew Bray, Amelia McNamara, Emil Hvitfeldt, and Mouna Belaid. I highly recommend this workshop, which covers a lot of background detail and specifics that we won’t have time to go over.\nIn brief, we produce a .qmd file (a Quarto file), which will include some mix of text, code, and the markdown language required to format and control the file. The code can be R, Python, Julia, etc.,. The code is converted into output (e.g., figures are generated, sums calculated), and this is then converted into one or more output documents.\n\n\nIsn’t this just RMarkdown?\nIf you are familiar with RMarkdown this will all look and sound familiar, and these systems both aim to capture information and improve reproducibility. In fact, if you have RMarkdown documents you can rename them as .qmd files and they will render.\nHowever, note that RMarkdown is R-specific. Quarto is language agnostic and can be used by people who work in Python.\nIn addition, Quarto has a strong focus on output documents and you will have an easier time with formatting and making high quality documents.",
    "crumbs": [
      "Day Two - Quarto",
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "episode_21_introduction.html#working-in-quarto",
    "href": "episode_21_introduction.html#working-in-quarto",
    "title": "Introduction to Quarto",
    "section": "Working in Quarto",
    "text": "Working in Quarto\nWe will start by creating some basic documents, building up our working knowledge of the quarto language.\nQuarto is a part of RStudio and this is how we will be working with it today. There is a Quarto R package that can be run separately from RStudio, and there is a Quarto extension for VisualStudioCode.",
    "crumbs": [
      "Day Two - Quarto",
      "Introduction to Quarto"
    ]
  }
]