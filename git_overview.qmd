---
title: "Part One - Git"
toc: true
---

# What is Git/Github and why do I want to use it? 

**Git** is a version control system. It lets you track changes to your code and documents over time, so you can:

- **Organise your work:** keep your research projects, analysis scripts, and data files tidy and structured.
- **Track changes:** see what was added, removed, or modified, and go back to previous versions if something breaks.
- **Collaborate safely:** multiple people can work on the same project without overwriting each other’s work.

**GitHub** is a cloud-based platform that works with Git. It lets you:   

- **Share your projects** with others, or download packages and code that other researchers have shared.  
- **Collaborate** on code and projects with colleagues or contributors around the world.  
- **Create webpages and reports** using tools like **Quarto** (we’ll cover this in part two of the workshop).  
- **Host and publish your work online**, making it easier to share and document your research reproducibly.  

In short: Git keeps your work organised and versioned on your local computer, and GitHub lets you back it up, share it, and collaborate with others online.

::: {.callout-tip appearance="simple"}
# Some cool examples of how people use git/github:
- The [Kākāpō genome project](https://github.com/GenomicsAotearoa/Kakapo), with all the scripts and workflows needed for the genome assembly.  
- The website for the [Genomics Aotearoa Bioinformatics Training Programme](https://github.com/GenomicsAotearoa/BioinformaticsTrainingProgramme) is hosted on github, written in Quarto and displayed using [github pages.](https://docs.github.com/en/pages)  
- A curated list of [awesome ggplot2 packages](https://github.com/erikgahner/awesome-ggplot2)  
:::

### Setup on local machine  
  
We will run everything locally in RStudio. You could also use any command line shell you like instead (*e.g.,* Terminal (macOS), Warp, GitBash for Windows, Visual Studio Code). Please have the following installed **before the workshop**.  

If you already have these tools installed, make sure they are **up to date**.


#### 1. Install the latest version of R


- **Mac:** [Download `.pkg` installer here](https://cran.r-project.org/bin/macosx/)  
- **Windows:** [Download `.exe` installer here](https://cran.r-project.org/bin/windows/base/)  
- **Linux:** [Instructions here](https://cran.r-project.org/bin/linux/)  

> **Note:** Do **not** use `.tar.gz` source files unless you want to compile R from source.

#### 2. Install the latest version of RStudio

- [Download RStudio Desktop](https://posit.co/download/rstudio-desktop/)  


#### 3. Install Git

Git is a separate program from R/RStudio.  

- **Mac:** Check if Git is already installed. Open terminal and run:  
```bash
git --version
```
> **Note:** If it is not already installed, [follow instructions here for macOS](https://git-scm.com/downloads/mac)  

- **Windows:** Follow the "Installing Git for Windows" instructions [here on the software carpentry page](https://carpentries.github.io/workshop-template/install_instructions/#shell-install-gitbash) (Instructions may be hiding under "The Bash Shell" section, tab for "Git for Windows".) 

> **Note:** If you have previously completed the carpentries lesson on [Introduction to Shell](https://swcarpentry.github.io/shell-novice/01-intro.html) on your windows computer, you would have already downloaded Git. 


#### 4. Make a Github account

1. Go to [https://github.com](https://github.com) and follow the “Sign up” link at the top-right of the window.
2. Follow the instructions to create an account.
3. Verify your email address with GitHub.
4. Configure multifactor authentication ([see Github page on 2FA](https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/configuring-two-factor-authentication))  
5. **Optional:** Add a profile picture and modify other preferences, such as linking ORCID, in your github account.


::: {.callout-caution appearance="minimal"}
## Caution - chose your email address and username wisely!  

- Use an email address for Github that you expect to have access to in the future. Your institutional address may not be the best choice.  
- Your username will become the name all of your collaborators and the github public see, so chose something wise (*e.g.,* your fullname, or a shortened version of it).  

You will need to remember both of these for when we [configure git](episode_02_SettingUpGit.qmd) during the workshop.
:::  


